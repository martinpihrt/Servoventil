
C:\Users\zak\AppData\Local\Temp\arduino_build_271574/servoventil_0.0.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_12>
      34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_16>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_20>
      54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      5c:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__vector_23>
      60:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_24>
      64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      68:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      6c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>

00000070 <__trampolines_end>:
__trampolines_start():
      70:	01 80       	ldd	r0, Z+1	; 0x01
      72:	40 20       	and	r4, r0
      74:	10 08       	sbc	r1, r0
      76:	04 02       	muls	r16, r20
      78:	01 20       	and	r0, r1
      7a:	10 04       	cpc	r1, r0
      7c:	02 01       	movw	r0, r4
      7e:	08 04       	cpc	r0, r8
      80:	02 08       	sbc	r0, r2

00000082 <digital_pin_to_port_PGM>:
      82:	02 01 01 01 01 01 01 01 01 03 03 03 03 03 02 02     ................
      92:	02 03                                               ..

00000094 <port_to_input_PGM>:
      94:	00 2f 2b 27                                         ./+'

00000098 <port_to_pullup_PGM>:
      98:	00 32 2e 2a                                         .2.*

0000009c <port_to_output_PGM>:
      9c:	00 31 2d 29                                         .1-)

000000a0 <port_to_mode_PGM>:
      a0:	00 30 2c 28                                         .0,(

000000a4 <__ctors_start>:
__ctors_start():
      a4:	06 03       	mulsu	r16, r22
      a6:	f9 09       	sbc	r31, r9

000000a8 <__ctors_end>:
__dtors_end():
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d4 e0       	ldi	r29, 0x04	; 4
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
__do_copy_data():
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e8 ee       	ldi	r30, 0xE8	; 232
      bc:	f2 e2       	ldi	r31, 0x22	; 34
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	aa 3d       	cpi	r26, 0xDA	; 218
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
__do_clear_bss():
      ca:	22 e0       	ldi	r18, 0x02	; 2
      cc:	aa ed       	ldi	r26, 0xDA	; 218
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a1 3f       	cpi	r26, 0xF1	; 241
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>

000000da <__do_global_ctors>:
__do_global_ctors():
      da:	10 e0       	ldi	r17, 0x00	; 0
      dc:	c4 e5       	ldi	r28, 0x54	; 84
      de:	d0 e0       	ldi	r29, 0x00	; 0
      e0:	04 c0       	rjmp	.+8      	; 0xea <__do_global_ctors+0x10>
      e2:	21 97       	sbiw	r28, 0x01	; 1
      e4:	fe 01       	movw	r30, r28
      e6:	0e 94 3e 11 	call	0x227c	; 0x227c <__tablejump2__>
      ea:	c2 35       	cpi	r28, 0x52	; 82
      ec:	d1 07       	cpc	r29, r17
      ee:	c9 f7       	brne	.-14     	; 0xe2 <__do_global_ctors+0x8>
      f0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <main>
      f4:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <_exit>

000000f8 <__bad_interrupt>:
__vector_22():
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <getBATT()>:
_Z7getBATTv():
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:92

#define BUILDTIME __TIME__    

void getBATT(){
 #ifdef USE_AD 
   int in = analogRead(LOW_BAT_PIN);
      fc:	80 e4       	ldi	r24, 0x40	; 64
      fe:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <analogRead>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:93
   volt = (in * 6.0) / 1024.0; // při 6V je za děličem 3.3V tedy 1023 max Ubat
     102:	bc 01       	movw	r22, r24
     104:	99 0f       	add	r25, r25
     106:	88 0b       	sbc	r24, r24
     108:	99 0b       	sbc	r25, r25
     10a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatsisf>
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	40 ec       	ldi	r20, 0xC0	; 192
     114:	50 e4       	ldi	r21, 0x40	; 64
     116:	0e 94 17 10 	call	0x202e	; 0x202e <__mulsf3>
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	40 e8       	ldi	r20, 0x80	; 128
     120:	5a e3       	ldi	r21, 0x3A	; 58
     122:	0e 94 17 10 	call	0x202e	; 0x202e <__mulsf3>
     126:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <volt>
     12a:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <volt+0x1>
     12e:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <volt+0x2>
     132:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <volt+0x3>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:95
   #ifdef DEBUG
     DPRINT("Baterie");
     136:	63 e0       	ldi	r22, 0x03	; 3
     138:	71 e0       	ldi	r23, 0x01	; 1
     13a:	8f e1       	ldi	r24, 0x1F	; 31
     13c:	92 e0       	ldi	r25, 0x02	; 2
     13e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:96
     DPRINT("=");
     142:	6a e5       	ldi	r22, 0x5A	; 90
     144:	71 e0       	ldi	r23, 0x01	; 1
     146:	8f e1       	ldi	r24, 0x1F	; 31
     148:	92 e0       	ldi	r25, 0x02	; 2
     14a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:97
     DPRINT(volt);
     14e:	40 91 e8 01 	lds	r20, 0x01E8	; 0x8001e8 <volt>
     152:	50 91 e9 01 	lds	r21, 0x01E9	; 0x8001e9 <volt+0x1>
     156:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <volt+0x2>
     15a:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <volt+0x3>
     15e:	22 e0       	ldi	r18, 0x02	; 2
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	8f e1       	ldi	r24, 0x1F	; 31
     164:	92 e0       	ldi	r25, 0x02	; 2
     166:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Print::print(double, int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:98
     DPRINTLN("V");
     16a:	6b e0       	ldi	r22, 0x0B	; 11
     16c:	71 e0       	ldi	r23, 0x01	; 1
     16e:	8f e1       	ldi	r24, 0x1F	; 31
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <Print::println(char const*)>

00000176 <set_next_alarm()>:
_Z14set_next_alarmv():
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:103
   #endif
 #endif
}//konec void    

void set_next_alarm(void){
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	2f 97       	sbiw	r28, 0x0f	; 15
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	de bf       	out	0x3e, r29	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	cd bf       	out	0x3d, r28	; 61
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:106
    struct ts t;
    unsigned char wakeup_min;
    DS3231_get(&t);
     18a:	ce 01       	movw	r24, r28
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	0e 94 2f 08 	call	0x105e	; 0x105e <DS3231_get(ts*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:108
    // calculate the minute when the next alarm will be triggered
    wakeup_min = (t.min / SLEEP_PER + 1) * SLEEP_PER;
     192:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <SLEEP_PER>
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	62 2f       	mov	r22, r18
     19a:	0e 94 9a 10 	call	0x2134	; 0x2134 <__udivmodqi4>
     19e:	68 2f       	mov	r22, r24
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	6f 5f       	subi	r22, 0xFF	; 255
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	82 2f       	mov	r24, r18
     1a8:	0e 94 91 10 	call	0x2122	; 0x2122 <__mulqi3>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:109
    if (wakeup_min > 59) wakeup_min -= 60; 
     1ac:	8c 33       	cpi	r24, 0x3C	; 60
     1ae:	08 f0       	brcs	.+2      	; 0x1b2 <set_next_alarm()+0x3c>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:109 (discriminator 1)
     1b0:	8c 53       	subi	r24, 0x3C	; 60
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:116
    // to trigger the alarm
    // A2M2 (minutes) (0 to enable, 1 to disable)
    // A2M3 (hour)    (0 to enable, 1 to disable) 
    // A2M4 (day)     (0 to enable, 1 to disable)
    // DY/DT          (dayofweek == 1/dayofmonth == 0)
    uint8_t flags[4] = { 0, 1, 1, 1 };
     1b2:	1c 86       	std	Y+12, r1	; 0x0c
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	9d 87       	std	Y+13, r25	; 0x0d
     1b8:	9e 87       	std	Y+14, r25	; 0x0e
     1ba:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:118
    // set Alarm2. only the minute is set since we ignore the hour and day component
    DS3231_set_a2(wakeup_min, 0, 0, flags);
     1bc:	9e 01       	movw	r18, r28
     1be:	24 5f       	subi	r18, 0xF4	; 244
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	0e 94 c0 07 	call	0xf80	; 0xf80 <DS3231_set_a2(unsigned char, unsigned char, unsigned char, unsigned char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:120
    // activate Alarm2
    DS3231_set_creg(DS3231_CONTROL_INTCN | DS3231_CONTROL_A2IE);
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	0e 94 98 07 	call	0xf30	; 0xf30 <DS3231_set_creg(unsigned char)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:121
}//konec void 
     1d0:	2f 96       	adiw	r28, 0x0f	; 15
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <setup>:
setup():
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:126
  
//******************************************************************************************************************************

void setup() { // nastavení
  pinMode(PWR_ON_PIN,OUTPUT);         // pin pro samodržení napájení CPU
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:127
  pinMode(PWR_SERVO_ON_PIN,OUTPUT);   // pin pro napájení serva
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:128
  pinMode(SERVO_PIN,OUTPUT);          // pin pro PWM serva
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:129
  pinMode(LED_LOWBAT_PIN,OUTPUT);     // pin pro LED
     1fa:	61 e0       	ldi	r22, 0x01	; 1
     1fc:	86 e0       	ldi	r24, 0x06	; 6
     1fe:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:130
  pinMode(LOW_BAT_PIN,INPUT);         // pin na AD
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	80 e4       	ldi	r24, 0x40	; 64
     206:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:131
  pinMode(SW1_PIN,INPUT_PULLUP);      // pin DIP1 
     20a:	62 e0       	ldi	r22, 0x02	; 2
     20c:	87 e0       	ldi	r24, 0x07	; 7
     20e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:132
  pinMode(SW2_PIN,INPUT_PULLUP);      // pin DIP2
     212:	62 e0       	ldi	r22, 0x02	; 2
     214:	88 e0       	ldi	r24, 0x08	; 8
     216:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:133
  pinMode(SW3_PIN,INPUT_PULLUP);      // pin DIP3
     21a:	62 e0       	ldi	r22, 0x02	; 2
     21c:	89 e0       	ldi	r24, 0x09	; 9
     21e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:134
  pinMode(SW4_PIN,INPUT_PULLUP);      // pin DIP4
     222:	62 e0       	ldi	r22, 0x02	; 2
     224:	8a e0       	ldi	r24, 0x0A	; 10
     226:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:136
  
  digitalWrite(PWR_ON_PIN,HIGH);      // podržet napájení (po uvolnění tlačítka
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:138
  
  digitalWrite(PWR_SERVO_ON_PIN,LOW); // vypnout napájení serva
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:139
  digitalWrite(SERVO_PIN,LOW);        // vypnout výstup pro PWM serva      
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:140
  digitalWrite(LED_LOWBAT_PIN,HIGH);  // zapnout LED
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	86 e0       	ldi	r24, 0x06	; 6
     246:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
wdt_enable():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\avr/wdt.h:354
			[SIGNATURE] "r" ((uint8_t)0xD8),
			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
				| _BV(WDE) | (value & 0x07) ))
			: "r0"
			);
     24a:	9f e0       	ldi	r25, 0x0F	; 15
     24c:	88 ed       	ldi	r24, 0xD8	; 216
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	a8 95       	wdr
     254:	8f bd       	out	0x2f, r24	; 47
     256:	90 bf       	out	0x30, r25	; 48
     258:	0f be       	out	0x3f, r0	; 63
setup():
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:143

  wdt_enable(WDTO_2S);                // povolit watchdog ping 2s
  wdt_reset();                        // vynulovat časovač pro wdt
     25a:	a8 95       	wdr
_ZN14HardwareSerial5beginEm():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.h:80
    HardwareSerial(ring_buffer *rx_buffer,
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb, volatile uint8_t *ucsrc,
      volatile uint8_t *udr,
      uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     25c:	26 e0       	ldi	r18, 0x06	; 6
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	52 ec       	ldi	r21, 0xC2	; 194
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	8f e1       	ldi	r24, 0x1F	; 31
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	0e 94 97 09 	call	0x132e	; 0x132e <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:147
  
  #ifdef USE_UART
     Serial.begin(BAUD);              // rychlost linky 
     delay(1000);                     // počkáme na UART
     26e:	68 ee       	ldi	r22, 0xE8	; 232
     270:	73 e0       	ldi	r23, 0x03	; 3
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:149
  #endif
  wdt_reset();                        // vynulovat časovač pro wdt
     27a:	a8 95       	wdr
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:152
  
  #ifdef DEBUG
     DPRINTLN();
     27c:	8f e1       	ldi	r24, 0x1F	; 31
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Print::println()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:153
     DPRINT("FW:");
     284:	6d e0       	ldi	r22, 0x0D	; 13
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	8f e1       	ldi	r24, 0x1F	; 31
     28a:	92 e0       	ldi	r25, 0x02	; 2
     28c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:154
     DPRINT(FW);                      // verze FW
     290:	61 e1       	ldi	r22, 0x11	; 17
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	8f e1       	ldi	r24, 0x1F	; 31
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:155
     DPRINT(",");
     29c:	67 e1       	ldi	r22, 0x17	; 23
     29e:	71 e0       	ldi	r23, 0x01	; 1
     2a0:	8f e1       	ldi	r24, 0x1F	; 31
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:156
     DPRINT(BUILDTM_DAY);             // den
     2a8:	4a e0       	ldi	r20, 0x0A	; 10
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	62 e1       	ldi	r22, 0x12	; 18
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	8f e1       	ldi	r24, 0x1F	; 31
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Print::print(int, int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:157
     DPRINT(".");
     2b8:	63 eb       	ldi	r22, 0xB3	; 179
     2ba:	71 e0       	ldi	r23, 0x01	; 1
     2bc:	8f e1       	ldi	r24, 0x1F	; 31
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:158
     DPRINT(BUILDTM_MONTH);           // měsíc
     2c4:	4a e0       	ldi	r20, 0x0A	; 10
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	62 e0       	ldi	r22, 0x02	; 2
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	8f e1       	ldi	r24, 0x1F	; 31
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Print::print(int, int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:159
     DPRINT(".");
     2d4:	63 eb       	ldi	r22, 0xB3	; 179
     2d6:	71 e0       	ldi	r23, 0x01	; 1
     2d8:	8f e1       	ldi	r24, 0x1F	; 31
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:160
     DPRINT(BUILDTM_YEAR);            // rok
     2e0:	4a e0       	ldi	r20, 0x0A	; 10
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	63 ee       	ldi	r22, 0xE3	; 227
     2e6:	77 e0       	ldi	r23, 0x07	; 7
     2e8:	8f e1       	ldi	r24, 0x1F	; 31
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Print::print(int, int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:161
     DPRINT(",");
     2f0:	67 e1       	ldi	r22, 0x17	; 23
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	8f e1       	ldi	r24, 0x1F	; 31
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:162
     DPRINTLN(BUILDTIME);             // čas kompilace  
     2fc:	69 e1       	ldi	r22, 0x19	; 25
     2fe:	71 e0       	ldi	r23, 0x01	; 1
     300:	8f e1       	ldi	r24, 0x1F	; 31
     302:	92 e0       	ldi	r25, 0x02	; 2
     304:	0e 94 bf 0a 	call	0x157e	; 0x157e <Print::println(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:167
  #endif  

  #ifdef USE_DS3231 
    #ifdef DEBUG
       DPRINT("RTC init...");
     308:	62 e2       	ldi	r22, 0x22	; 34
     30a:	71 e0       	ldi	r23, 0x01	; 1
     30c:	8f e1       	ldi	r24, 0x1F	; 31
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:169
    #endif   
    Wire.begin();                           // aktivace I2C 
     314:	88 ef       	ldi	r24, 0xF8	; 248
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 36 06 	call	0xc6c	; 0xc6c <TwoWire::begin()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:170
    Wire.beginTransmission(DS_ADDRESS);     // probuď zařízení na 0x68
     31c:	68 e6       	ldi	r22, 0x68	; 104
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	88 ef       	ldi	r24, 0xF8	; 248
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 4c 06 	call	0xc98	; 0xc98 <TwoWire::beginTransmission(int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:171
    if(Wire.endTransmission()==0) {         // test zda byla odpověď ze zařízení na adrese 0x68 (RTC DS3231)
     328:	88 ef       	ldi	r24, 0xF8	; 248
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 70 06 	call	0xce0	; 0xce0 <TwoWire::endTransmission()>
     330:	81 11       	cpse	r24, r1
     332:	0c c0       	rjmp	.+24     	; 0x34c <setup+0x16a>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:172
       DS3231_init(DS3231_CONTROL_INTCN);   // aktivace DS3231
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	0e 94 af 07 	call	0xf5e	; 0xf5e <DS3231_init(unsigned char)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:173
       DS3231_clear_a2f();                  // smazat příznak alarmu a nastavit pin INT na vysokou impedanci
     33a:	0e 94 b4 07 	call	0xf68	; 0xf68 <DS3231_clear_a2f()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:175
       #ifdef DEBUG
          DPRINTLN("OK");
     33e:	6e e2       	ldi	r22, 0x2E	; 46
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	8f e1       	ldi	r24, 0x1F	; 31
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	0e 94 bf 0a 	call	0x157e	; 0x157e <Print::println(char const*)>
     34a:	0e c0       	rjmp	.+28     	; 0x368 <setup+0x186>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:180
       #endif   
    }
    else {
      #ifdef DEBUG
         DPRINT("Chyba RTC na adrese: ");
     34c:	61 e3       	ldi	r22, 0x31	; 49
     34e:	71 e0       	ldi	r23, 0x01	; 1
     350:	8f e1       	ldi	r24, 0x1F	; 31
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:181
         DPRINTLN(DS_ADDRESS);
     358:	4a e0       	ldi	r20, 0x0A	; 10
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	68 e6       	ldi	r22, 0x68	; 104
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	8f e1       	ldi	r24, 0x1F	; 31
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <Print::println(int, int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:187
      #endif   
    }
  #endif  
  
  #ifdef DEBUG
     DPRINT("DIP1-4 init...");
     368:	67 e4       	ldi	r22, 0x47	; 71
     36a:	71 e0       	ldi	r23, 0x01	; 1
     36c:	8f e1       	ldi	r24, 0x1F	; 31
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:188
     DPRINTLN("OK");
     374:	6e e2       	ldi	r22, 0x2E	; 46
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	8f e1       	ldi	r24, 0x1F	; 31
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	0e 94 bf 0a 	call	0x157e	; 0x157e <Print::println(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:189
     DPRINT("DIP1=");
     380:	66 e5       	ldi	r22, 0x56	; 86
     382:	71 e0       	ldi	r23, 0x01	; 1
     384:	8f e1       	ldi	r24, 0x1F	; 31
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:190
     DPRINT(digitalRead(SW1_PIN));DPRINT(" DIP2=");DPRINT(digitalRead(SW2_PIN));DPRINT(" DIP3=");DPRINT(digitalRead(SW3_PIN));DPRINT(" DIP4=");DPRINTLN(digitalRead(SW4_PIN));
     38c:	87 e0       	ldi	r24, 0x07	; 7
     38e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <digitalRead>
     392:	4a e0       	ldi	r20, 0x0A	; 10
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	bc 01       	movw	r22, r24
     398:	8f e1       	ldi	r24, 0x1F	; 31
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Print::print(int, int)>
     3a0:	6c e5       	ldi	r22, 0x5C	; 92
     3a2:	71 e0       	ldi	r23, 0x01	; 1
     3a4:	8f e1       	ldi	r24, 0x1F	; 31
     3a6:	92 e0       	ldi	r25, 0x02	; 2
     3a8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
     3ac:	88 e0       	ldi	r24, 0x08	; 8
     3ae:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <digitalRead>
     3b2:	4a e0       	ldi	r20, 0x0A	; 10
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	bc 01       	movw	r22, r24
     3b8:	8f e1       	ldi	r24, 0x1F	; 31
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Print::print(int, int)>
     3c0:	63 e6       	ldi	r22, 0x63	; 99
     3c2:	71 e0       	ldi	r23, 0x01	; 1
     3c4:	8f e1       	ldi	r24, 0x1F	; 31
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
     3cc:	89 e0       	ldi	r24, 0x09	; 9
     3ce:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <digitalRead>
     3d2:	4a e0       	ldi	r20, 0x0A	; 10
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	bc 01       	movw	r22, r24
     3d8:	8f e1       	ldi	r24, 0x1F	; 31
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Print::print(int, int)>
     3e0:	6a e6       	ldi	r22, 0x6A	; 106
     3e2:	71 e0       	ldi	r23, 0x01	; 1
     3e4:	8f e1       	ldi	r24, 0x1F	; 31
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <digitalRead>
     3f2:	4a e0       	ldi	r20, 0x0A	; 10
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	bc 01       	movw	r22, r24
     3f8:	8f e1       	ldi	r24, 0x1F	; 31
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <Print::println(int, int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:194
  #endif
  
  #ifdef USE_AD
    getBATT();
     400:	0e 94 7e 00 	call	0xfc	; 0xfc <getBATT()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:195
    if(volt<MIN_BATT) {
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 ea       	ldi	r20, 0xA0	; 160
     40a:	50 e4       	ldi	r21, 0x40	; 64
     40c:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <volt>
     410:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <volt+0x1>
     414:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <volt+0x2>
     418:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <volt+0x3>
     41c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__cmpsf2>
     420:	87 ff       	sbrs	r24, 7
     422:	06 c0       	rjmp	.+12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:197
      #ifdef DEBUG
         DPRINTLN("Chyba - napeti baterie <5V!"); // pro výpis na UART
     424:	61 e7       	ldi	r22, 0x71	; 113
     426:	71 e0       	ldi	r23, 0x01	; 1
     428:	8f e1       	ldi	r24, 0x1F	; 31
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 bf 0a 	call	0x157e	; 0x157e <Print::println(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:201
      #endif
    }// konec if
    
    while(volt<5.0){ // je malé napětí baterie budeme neustále točit a dál nic nebude dokud bat >5V
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 ea       	ldi	r20, 0xA0	; 160
     436:	50 e4       	ldi	r21, 0x40	; 64
     438:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <volt>
     43c:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <volt+0x1>
     440:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <volt+0x2>
     444:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <volt+0x3>
     448:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__cmpsf2>
     44c:	87 ff       	sbrs	r24, 7
     44e:	2c c0       	rjmp	.+88     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:202
       digitalWrite(LED_LOWBAT_PIN,HIGH);   // zapnout LED
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:203
       delay(50);
     458:	62 e3       	ldi	r22, 0x32	; 50
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:204
       digitalWrite(LED_LOWBAT_PIN,LOW);    // vypnout LED
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:205
       delay(50);
     46c:	62 e3       	ldi	r22, 0x32	; 50
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:206
       digitalWrite(LED_LOWBAT_PIN,HIGH);   // zapnout LED
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:207
       delay(50);
     480:	62 e3       	ldi	r22, 0x32	; 50
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:208
       digitalWrite(LED_LOWBAT_PIN,LOW);    // vypnout LED
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	86 e0       	ldi	r24, 0x06	; 6
     490:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:209
       delay(1000);
     494:	68 ee       	ldi	r22, 0xE8	; 232
     496:	73 e0       	ldi	r23, 0x03	; 3
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:210
       getBATT();
     4a0:	0e 94 7e 00 	call	0xfc	; 0xfc <getBATT()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:211
       wdt_reset();                        // vynulovat časovač pro wdt
     4a4:	a8 95       	wdr
     4a6:	c4 cf       	rjmp	.-120    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:218
    
  #endif // AD

  #ifdef USE_SERVO
     #ifdef DEBUG
        DPRINT("Servo init...");
     4a8:	6d e8       	ldi	r22, 0x8D	; 141
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	8f e1       	ldi	r24, 0x1F	; 31
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:220
     #endif
     pinMode(PWR_SERVO_ON_PIN,OUTPUT);      // napájení serva výstupní pin
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:221
     digitalWrite(PWR_SERVO_ON_PIN, HIGH);  // zapnout napájení serva
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:222
     delay(100);
     4c4:	64 e6       	ldi	r22, 0x64	; 100
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:223
     servo.attach(SERVO_PIN);               // aktivovat servo
     4d0:	63 e0       	ldi	r22, 0x03	; 3
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	8c ed       	ldi	r24, 0xDC	; 220
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 17 03 	call	0x62e	; 0x62e <SoftwareServo::attach(int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:225
     #ifdef DEBUG
        DPRINTLN("OK");
     4dc:	6e e2       	ldi	r22, 0x2E	; 46
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	8f e1       	ldi	r24, 0x1F	; 31
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 bf 0a 	call	0x157e	; 0x157e <Print::println(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:231
     #endif
  #endif  
  
  #ifdef USE_DS3231 
    #ifdef DEBUG
       DPRINT("RTC nastavuji interval...");
     4e8:	6b e9       	ldi	r22, 0x9B	; 155
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	8f e1       	ldi	r24, 0x1F	; 31
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:235
    #endif
//    set_next_alarm();                       // nastavit kdy se probudi CPU podle DIP
    #ifdef DEBUG
       DPRINTLN("OK");
     4f4:	6e e2       	ldi	r22, 0x2E	; 46
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	8f e1       	ldi	r24, 0x1F	; 31
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	0e 94 bf 0a 	call	0x157e	; 0x157e <Print::println(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:239
    #endif
  #endif
      
  digitalWrite(LED_LOWBAT_PIN,LOW);         // vypnout LED
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	86 e0       	ldi	r24, 0x06	; 6
     504:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:240
  wdt_reset();                        // vynulovat časovač pro wdt
     508:	a8 95       	wdr
     50a:	08 95       	ret

0000050c <loop>:
loop():
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:245
}//konec setup

int test=0; // pro test níže v loop

void loop(){
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:246
  unsigned long currentMillis = millis();
     518:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <millis>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:247
  if (currentMillis - previousMillis >= interval) { // časovač
     51c:	00 91 e4 01 	lds	r16, 0x01E4	; 0x8001e4 <previousMillis>
     520:	10 91 e5 01 	lds	r17, 0x01E5	; 0x8001e5 <previousMillis+0x1>
     524:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <previousMillis+0x2>
     528:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <previousMillis+0x3>
     52c:	6b 01       	movw	r12, r22
     52e:	7c 01       	movw	r14, r24
     530:	c0 1a       	sub	r12, r16
     532:	d1 0a       	sbc	r13, r17
     534:	e2 0a       	sbc	r14, r18
     536:	f3 0a       	sbc	r15, r19
     538:	97 01       	movw	r18, r14
     53a:	86 01       	movw	r16, r12
     53c:	04 36       	cpi	r16, 0x64	; 100
     53e:	11 05       	cpc	r17, r1
     540:	21 05       	cpc	r18, r1
     542:	31 05       	cpc	r19, r1
     544:	08 f4       	brcc	.+2      	; 0x548 <loop+0x3c>
     546:	50 c0       	rjmp	.+160    	; 0x5e8 <loop+0xdc>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:248
    previousMillis = currentMillis;
     548:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <previousMillis>
     54c:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <previousMillis+0x1>
     550:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <previousMillis+0x2>
     554:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <previousMillis+0x3>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:250
// test serva, blikání LED, měření baterie
    if(test==1 or test==90 or test==180) getBATT();  
     558:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     55c:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <__data_end+0x1>
     560:	81 30       	cpi	r24, 0x01	; 1
     562:	91 05       	cpc	r25, r1
     564:	31 f0       	breq	.+12     	; 0x572 <loop+0x66>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:250 (discriminator 2)
     566:	8a 35       	cpi	r24, 0x5A	; 90
     568:	91 05       	cpc	r25, r1
     56a:	19 f0       	breq	.+6      	; 0x572 <loop+0x66>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:250 (discriminator 4)
     56c:	84 3b       	cpi	r24, 0xB4	; 180
     56e:	91 05       	cpc	r25, r1
     570:	11 f4       	brne	.+4      	; 0x576 <loop+0x6a>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:250 (discriminator 5)
     572:	0e 94 7e 00 	call	0xfc	; 0xfc <getBATT()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:251
    digitalWrite(LED_LOWBAT_PIN,!digitalRead(LED_LOWBAT_PIN)); // blikame LED
     576:	86 e0       	ldi	r24, 0x06	; 6
     578:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <digitalRead>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	89 2b       	or	r24, r25
     580:	09 f0       	breq	.+2      	; 0x584 <loop+0x78>
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	86 e0       	ldi	r24, 0x06	; 6
     586:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:252
    if(test<180) test++;
     58a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     58e:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <__data_end+0x1>
     592:	84 3b       	cpi	r24, 0xB4	; 180
     594:	91 05       	cpc	r25, r1
     596:	2c f4       	brge	.+10     	; 0x5a2 <loop+0x96>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:252 (discriminator 1)
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__data_end+0x1>
     59e:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:253
    if(test==180) {
     5a2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     5a6:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <__data_end+0x1>
     5aa:	84 3b       	cpi	r24, 0xB4	; 180
     5ac:	91 05       	cpc	r25, r1
     5ae:	e1 f4       	brne	.+56     	; 0x5e8 <loop+0xdc>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:254
      set_next_alarm();                      // nastavit kdy se probudi CPU podle DIP
     5b0:	0e 94 bb 00 	call	0x176	; 0x176 <set_next_alarm()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:256
      #ifdef DEBUG
        DPRINT("Vypinam!");
     5b4:	65 eb       	ldi	r22, 0xB5	; 181
     5b6:	71 e0       	ldi	r23, 0x01	; 1
     5b8:	8f e1       	ldi	r24, 0x1F	; 31
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Print::print(char const*)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:257
        delay(1000);
     5c0:	68 ee       	ldi	r22, 0xE8	; 232
     5c2:	73 e0       	ldi	r23, 0x03	; 3
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:258
        wdt_reset();                        // vynulovat časovač pro wdt
     5cc:	a8 95       	wdr
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:260
      #endif
      digitalWrite(SERVO_PIN,LOW);           // vypnout výstup pro PWM serva
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:261
      digitalWrite(PWR_SERVO_ON_PIN,LOW);    // vypnout napájení serva
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:262
      digitalWrite(PWR_ON_PIN,LOW);          // vypnout napájení CPU
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:253 (discriminator 1)
    previousMillis = currentMillis;
// test serva, blikání LED, měření baterie
    if(test==1 or test==90 or test==180) getBATT();  
    digitalWrite(LED_LOWBAT_PIN,!digitalRead(LED_LOWBAT_PIN)); // blikame LED
    if(test<180) test++;
    if(test==180) {
     5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <loop+0xda>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:268
      while(1); // čekáme na reset od wdt
    }
  }//konec if
    
  #ifdef USE_SERVO
     SoftwareServo::refresh();           // obnova pro servo
     5e8:	0e 94 88 03 	call	0x710	; 0x710 <SoftwareServo::refresh()>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:269
     servo.write(test);
     5ec:	60 91 da 01 	lds	r22, 0x01DA	; 0x8001da <__data_end>
     5f0:	70 91 db 01 	lds	r23, 0x01DB	; 0x8001db <__data_end+0x1>
     5f4:	8c ed       	ldi	r24, 0xDC	; 220
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 35 03 	call	0x66a	; 0x66a <SoftwareServo::write(int)>
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:271
  #endif
  wdt_reset();                        // vynulovat časovač pro wdt
     5fc:	a8 95       	wdr
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:272
}// konec loop
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	08 95       	ret

0000060c <_GLOBAL__sub_I_SLEEP_PER>:
_GLOBAL__sub_I_SLEEP_PER():
C:\Users\zak\Desktop\servoventil_0.0/servoventil_0.0.ino:54
  #define DPRINTLN(...)   
#endif

#ifdef USE_SERVO 
  #include <SoftwareServo.h> // knihovna pro servo
  SoftwareServo servo;
     60c:	8c ed       	ldi	r24, 0xDC	; 220
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0c 94 0a 03 	jmp	0x614	; 0x614 <SoftwareServo::SoftwareServo()>

00000614 <SoftwareServo::SoftwareServo()>:
_ZN13SoftwareServoC2Ev():
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:65
{
    for ( SoftwareServo *p = first; p != 0; p = p->next ) {
	if ( p == this) return 1;
    }
    return 0;
}
     614:	fc 01       	movw	r30, r24
     616:	10 82       	st	Z, r1
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	81 83       	std	Z+1, r24	; 0x01
     61c:	13 82       	std	Z+3, r1	; 0x03
     61e:	12 82       	std	Z+2, r1	; 0x02
     620:	82 e2       	ldi	r24, 0x22	; 34
     622:	84 83       	std	Z+4, r24	; 0x04
     624:	86 e9       	ldi	r24, 0x96	; 150
     626:	85 83       	std	Z+5, r24	; 0x05
     628:	17 82       	std	Z+7, r1	; 0x07
     62a:	16 82       	std	Z+6, r1	; 0x06
     62c:	08 95       	ret

0000062e <SoftwareServo::attach(int)>:
_ZN13SoftwareServo6attachEi():
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ec 01       	movw	r28, r24
     634:	86 2f       	mov	r24, r22
     636:	68 83       	st	Y, r22
     638:	9f ef       	ldi	r25, 0xFF	; 255
     63a:	99 83       	std	Y+1, r25	; 0x01
     63c:	1b 82       	std	Y+3, r1	; 0x03
     63e:	1a 82       	std	Y+2, r1	; 0x02
     640:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <SoftwareServo::first>
     644:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <SoftwareServo::first+0x1>
     648:	3f 83       	std	Y+7, r19	; 0x07
     64a:	2e 83       	std	Y+6, r18	; 0x06
     64c:	d0 93 f1 01 	sts	0x01F1, r29	; 0x8001f1 <SoftwareServo::first+0x1>
     650:	c0 93 f0 01 	sts	0x01F0, r28	; 0x8001f0 <SoftwareServo::first>
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	88 81       	ld	r24, Y
     65e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <pinMode>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <SoftwareServo::write(int)>:
_ZN13SoftwareServo5writeEi():
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
     678:	9b 01       	movw	r18, r22
     67a:	77 fd       	sbrc	r23, 7
     67c:	06 c0       	rjmp	.+12     	; 0x68a <SoftwareServo::write(int)+0x20>
     67e:	65 3b       	cpi	r22, 0xB5	; 181
     680:	71 05       	cpc	r23, r1
     682:	2c f0       	brlt	.+10     	; 0x68e <SoftwareServo::write(int)+0x24>
     684:	24 eb       	ldi	r18, 0xB4	; 180
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <SoftwareServo::write(int)+0x24>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	29 83       	std	Y+1, r18	; 0x01
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	c8 2e       	mov	r12, r24
     694:	d1 2c       	mov	r13, r1
     696:	e1 2c       	mov	r14, r1
     698:	f1 2c       	mov	r15, r1
     69a:	97 e0       	ldi	r25, 0x07	; 7
     69c:	cc 0c       	add	r12, r12
     69e:	dd 1c       	adc	r13, r13
     6a0:	ee 1c       	adc	r14, r14
     6a2:	ff 1c       	adc	r15, r15
     6a4:	9a 95       	dec	r25
     6a6:	d1 f7       	brne	.-12     	; 0x69c <SoftwareServo::write(int)+0x32>
     6a8:	6d 81       	ldd	r22, Y+5	; 0x05
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	68 1b       	sub	r22, r24
     6ae:	71 09       	sbc	r23, r1
     6b0:	cb 01       	movw	r24, r22
     6b2:	77 0f       	add	r23, r23
     6b4:	aa 0b       	sbc	r26, r26
     6b6:	bb 0b       	sbc	r27, r27
     6b8:	bc 01       	movw	r22, r24
     6ba:	cd 01       	movw	r24, r26
     6bc:	47 e0       	ldi	r20, 0x07	; 7
     6be:	66 0f       	add	r22, r22
     6c0:	77 1f       	adc	r23, r23
     6c2:	88 1f       	adc	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	4a 95       	dec	r20
     6c8:	d1 f7       	brne	.-12     	; 0x6be <SoftwareServo::write(int)+0x54>
     6ca:	03 2e       	mov	r0, r19
     6cc:	00 0c       	add	r0, r0
     6ce:	44 0b       	sbc	r20, r20
     6d0:	55 0b       	sbc	r21, r21
     6d2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__mulsidi3>
     6d6:	b9 01       	movw	r22, r18
     6d8:	ca 01       	movw	r24, r20
     6da:	24 eb       	ldi	r18, 0xB4	; 180
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	0e 94 c8 10 	call	0x2190	; 0x2190 <__divmodsi4>
     6e6:	c7 01       	movw	r24, r14
     6e8:	b6 01       	movw	r22, r12
     6ea:	62 0f       	add	r22, r18
     6ec:	73 1f       	adc	r23, r19
     6ee:	84 1f       	adc	r24, r20
     6f0:	95 1f       	adc	r25, r21
     6f2:	20 e4       	ldi	r18, 0x40	; 64
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	0e 94 c8 10 	call	0x2190	; 0x2190 <__divmodsi4>
     6fe:	3b 83       	std	Y+3, r19	; 0x03
     700:	2a 83       	std	Y+2, r18	; 0x02
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	08 95       	ret

00000710 <SoftwareServo::refresh()>:
_ZN13SoftwareServo7refreshEv():
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:68

void SoftwareServo::refresh()
{
     710:	6f 92       	push	r6
     712:	7f 92       	push	r7
     714:	8f 92       	push	r8
     716:	9f 92       	push	r9
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:128
		digitalWrite( s[i]->pin,0);
		break;
	    }
	}
    }
}
     72e:	cd b6       	in	r12, 0x3d	; 61
     730:	de b6       	in	r13, 0x3e	; 62
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:73
{
    uint8_t count = 0, i = 0;
    uint16_t base = 0;
    SoftwareServo *p;
    static unsigned long lastRefresh = 0;
    unsigned long m = millis();
     732:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <millis>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:76

    // if we haven't wrapped millis, and 20ms have not passed, then don't do anything
    if ( m >= lastRefresh && m < lastRefresh + 20) return;
     736:	80 90 ec 01 	lds	r8, 0x01EC	; 0x8001ec <SoftwareServo::refresh()::lastRefresh>
     73a:	90 90 ed 01 	lds	r9, 0x01ED	; 0x8001ed <SoftwareServo::refresh()::lastRefresh+0x1>
     73e:	a0 90 ee 01 	lds	r10, 0x01EE	; 0x8001ee <SoftwareServo::refresh()::lastRefresh+0x2>
     742:	b0 90 ef 01 	lds	r11, 0x01EF	; 0x8001ef <SoftwareServo::refresh()::lastRefresh+0x3>
     746:	68 15       	cp	r22, r8
     748:	79 05       	cpc	r23, r9
     74a:	8a 05       	cpc	r24, r10
     74c:	9b 05       	cpc	r25, r11
     74e:	58 f0       	brcs	.+22     	; 0x766 <SoftwareServo::refresh()+0x56>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:76 (discriminator 1)
     750:	24 e1       	ldi	r18, 0x14	; 20
     752:	82 0e       	add	r8, r18
     754:	91 1c       	adc	r9, r1
     756:	a1 1c       	adc	r10, r1
     758:	b1 1c       	adc	r11, r1
     75a:	68 15       	cp	r22, r8
     75c:	79 05       	cpc	r23, r9
     75e:	8a 05       	cpc	r24, r10
     760:	9b 05       	cpc	r25, r11
     762:	08 f4       	brcc	.+2      	; 0x766 <SoftwareServo::refresh()+0x56>
     764:	95 c0       	rjmp	.+298    	; 0x890 <SoftwareServo::refresh()+0x180>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:77
    lastRefresh = m;
     766:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <SoftwareServo::refresh()::lastRefresh>
     76a:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <SoftwareServo::refresh()::lastRefresh+0x1>
     76e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <SoftwareServo::refresh()::lastRefresh+0x2>
     772:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <SoftwareServo::refresh()::lastRefresh+0x3>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:79

    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) count++;
     776:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <SoftwareServo::first>
     77a:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <SoftwareServo::first+0x1>
     77e:	df 01       	movw	r26, r30
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:69
    return 0;
}

void SoftwareServo::refresh()
{
    uint8_t count = 0, i = 0;
     780:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:79 (discriminator 5)

    // if we haven't wrapped millis, and 20ms have not passed, then don't do anything
    if ( m >= lastRefresh && m < lastRefresh + 20) return;
    lastRefresh = m;

    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) count++;
     782:	10 97       	sbiw	r26, 0x00	; 0
     784:	61 f0       	breq	.+24     	; 0x79e <SoftwareServo::refresh()+0x8e>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:79 (discriminator 6)
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	8d 91       	ld	r24, X+
     78a:	9c 91       	ld	r25, X
     78c:	13 97       	sbiw	r26, 0x03	; 3
     78e:	89 2b       	or	r24, r25
     790:	09 f0       	breq	.+2      	; 0x794 <SoftwareServo::refresh()+0x84>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:79 (discriminator 2)
     792:	1f 5f       	subi	r17, 0xFF	; 255
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:79 (discriminator 4)
     794:	16 96       	adiw	r26, 0x06	; 6
     796:	0d 90       	ld	r0, X+
     798:	bc 91       	ld	r27, X
     79a:	a0 2d       	mov	r26, r0
     79c:	f2 cf       	rjmp	.-28     	; 0x782 <SoftwareServo::refresh()+0x72>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:80
    if ( count == 0) return;
     79e:	11 23       	and	r17, r17
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <SoftwareServo::refresh()+0x94>
     7a2:	76 c0       	rjmp	.+236    	; 0x890 <SoftwareServo::refresh()+0x180>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:83

    // gather all the SoftwareServos in an array
    SoftwareServo *s[count];
     7a4:	81 2f       	mov	r24, r17
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	ad b7       	in	r26, 0x3d	; 61
     7ae:	be b7       	in	r27, 0x3e	; 62
     7b0:	a8 1b       	sub	r26, r24
     7b2:	b9 0b       	sbc	r27, r25
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	be bf       	out	0x3e, r27	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	ad bf       	out	0x3d, r26	; 61
     7be:	8d b7       	in	r24, 0x3d	; 61
     7c0:	9e b7       	in	r25, 0x3e	; 62
     7c2:	01 96       	adiw	r24, 0x01	; 1
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:69
    return 0;
}

void SoftwareServo::refresh()
{
    uint8_t count = 0, i = 0;
     7c4:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:84 (discriminator 5)
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) count++;
    if ( count == 0) return;

    // gather all the SoftwareServos in an array
    SoftwareServo *s[count];
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) s[i++] = p;
     7c6:	30 97       	sbiw	r30, 0x00	; 0
     7c8:	89 f0       	breq	.+34     	; 0x7ec <SoftwareServo::refresh()+0xdc>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:84 (discriminator 6)
     7ca:	42 81       	ldd	r20, Z+2	; 0x02
     7cc:	53 81       	ldd	r21, Z+3	; 0x03
     7ce:	45 2b       	or	r20, r21
     7d0:	49 f0       	breq	.+18     	; 0x7e4 <SoftwareServo::refresh()+0xd4>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:84 (discriminator 2)
     7d2:	a2 2f       	mov	r26, r18
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	aa 0f       	add	r26, r26
     7d8:	bb 1f       	adc	r27, r27
     7da:	a8 0f       	add	r26, r24
     7dc:	b9 1f       	adc	r27, r25
     7de:	ed 93       	st	X+, r30
     7e0:	fc 93       	st	X, r31
     7e2:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:84 (discriminator 4)
     7e4:	06 80       	ldd	r0, Z+6	; 0x06
     7e6:	f7 81       	ldd	r31, Z+7	; 0x07
     7e8:	e0 2d       	mov	r30, r0
     7ea:	ed cf       	rjmp	.-38     	; 0x7c6 <SoftwareServo::refresh()+0xb6>
     7ec:	5c 01       	movw	r10, r24
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:89

    // bubblesort the SoftwareServos by pulse time, ascending order
    for(;;) {
	uint8_t moved = 0;
	for ( i = 1; i < count; i++) {
     7ee:	fc 01       	movw	r30, r24
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:88
    SoftwareServo *s[count];
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) s[i++] = p;

    // bubblesort the SoftwareServos by pulse time, ascending order
    for(;;) {
	uint8_t moved = 0;
     7f0:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:89
	for ( i = 1; i < count; i++) {
     7f2:	21 e0       	ldi	r18, 0x01	; 1
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:89 (discriminator 1)
     7f4:	21 17       	cp	r18, r17
     7f6:	e1 f0       	breq	.+56     	; 0x830 <SoftwareServo::refresh()+0x120>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:90
	    if ( s[i]->pulse0 < s[i-1]->pulse0) {
     7f8:	82 80       	ldd	r8, Z+2	; 0x02
     7fa:	93 80       	ldd	r9, Z+3	; 0x03
     7fc:	41 91       	ld	r20, Z+
     7fe:	51 91       	ld	r21, Z+
     800:	d4 01       	movw	r26, r8
     802:	12 96       	adiw	r26, 0x02	; 2
     804:	ed 90       	ld	r14, X+
     806:	fc 90       	ld	r15, X
     808:	13 97       	sbiw	r26, 0x03	; 3
     80a:	da 01       	movw	r26, r20
     80c:	12 96       	adiw	r26, 0x02	; 2
     80e:	6d 91       	ld	r22, X+
     810:	7c 91       	ld	r23, X
     812:	13 97       	sbiw	r26, 0x03	; 3
     814:	e6 16       	cp	r14, r22
     816:	f7 06       	cpc	r15, r23
     818:	48 f4       	brcc	.+18     	; 0x82c <SoftwareServo::refresh()+0x11c>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:92
		SoftwareServo *t = s[i];
		s[i] = s[i-1];
     81a:	51 83       	std	Z+1, r21	; 0x01
     81c:	40 83       	st	Z, r20
     81e:	af 01       	movw	r20, r30
     820:	42 50       	subi	r20, 0x02	; 2
     822:	51 09       	sbc	r21, r1
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:93
		s[i-1] = t;
     824:	da 01       	movw	r26, r20
     826:	8d 92       	st	X+, r8
     828:	9c 92       	st	X, r9
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:94
		moved = 1;
     82a:	31 e0       	ldi	r19, 0x01	; 1
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:89 (discriminator 2)
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) s[i++] = p;

    // bubblesort the SoftwareServos by pulse time, ascending order
    for(;;) {
	uint8_t moved = 0;
	for ( i = 1; i < count; i++) {
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	e2 cf       	rjmp	.-60     	; 0x7f4 <SoftwareServo::refresh()+0xe4>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:97
		s[i] = s[i-1];
		s[i-1] = t;
		moved = 1;
	    }
	}
	if ( !moved) break;
     830:	31 11       	cpse	r19, r1
     832:	dc cf       	rjmp	.-72     	; 0x7ec <SoftwareServo::refresh()+0xdc>
     834:	7c 01       	movw	r14, r24
     836:	91 2c       	mov	r9, r1
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:106 (discriminator 3)
    // Note the timing error here... when you have many SoftwareServos going, the
    // ones at the front will get a pulse that is a few microseconds too long.
    // Figure about 4uS/SoftwareServo after them. This could be compensated, but I feel
    // it is within the margin of error of software SoftwareServos that could catch
    // an extra interrupt handler at any time.
    for ( i = 0; i < count; i++) digitalWrite( s[i]->pin, 1);
     838:	d7 01       	movw	r26, r14
     83a:	ed 91       	ld	r30, X+
     83c:	fd 91       	ld	r31, X+
     83e:	7d 01       	movw	r14, r26
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	80 81       	ld	r24, Z
     844:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
     848:	93 94       	inc	r9
     84a:	91 12       	cpse	r9, r17
     84c:	f5 cf       	rjmp	.-22     	; 0x838 <SoftwareServo::refresh()+0x128>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:108

    uint8_t start = TCNT0;
     84e:	f9 b2       	in	r15, 0x19	; 25
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:70
}

void SoftwareServo::refresh()
{
    uint8_t count = 0, i = 0;
    uint16_t base = 0;
     850:	81 2c       	mov	r8, r1
     852:	91 2c       	mov	r9, r1
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:113
    uint8_t start = TCNT0;
    uint8_t now = start;
    uint8_t last = now;

    // Now wait for each pin's time in turn..
    for ( i = 0; i < count; i++) {
     854:	e1 2c       	mov	r14, r1
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:114
	uint16_t go = start + s[i]->pulse0;
     856:	6f 2c       	mov	r6, r15
     858:	71 2c       	mov	r7, r1
     85a:	d5 01       	movw	r26, r10
     85c:	ed 91       	ld	r30, X+
     85e:	fd 91       	ld	r31, X+
     860:	5d 01       	movw	r10, r26
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	93 81       	ldd	r25, Z+3	; 0x03
     866:	86 0d       	add	r24, r6
     868:	97 1d       	adc	r25, r7
     86a:	2f 2d       	mov	r18, r15
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:118

	// loop until we reach or pass 'go' time
	for (;;) {
	    now = TCNT0;
     86c:	f9 b2       	in	r15, 0x19	; 25
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:119
	    if ( now < last) base += 256;
     86e:	f2 16       	cp	r15, r18
     870:	08 f4       	brcc	.+2      	; 0x874 <SoftwareServo::refresh()+0x164>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:119 (discriminator 1)
     872:	93 94       	inc	r9
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:118
    for ( i = 0; i < count; i++) {
	uint16_t go = start + s[i]->pulse0;

	// loop until we reach or pass 'go' time
	for (;;) {
	    now = TCNT0;
     874:	2f 2d       	mov	r18, r15
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:122
	    if ( now < last) base += 256;
	    last = now;

	    if ( base+now > go) {
     876:	a4 01       	movw	r20, r8
     878:	4f 0d       	add	r20, r15
     87a:	51 1d       	adc	r21, r1
     87c:	84 17       	cp	r24, r20
     87e:	95 07       	cpc	r25, r21
     880:	a8 f7       	brcc	.-22     	; 0x86c <SoftwareServo::refresh()+0x15c>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:123
		digitalWrite( s[i]->pin,0);
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <digitalWrite>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:113
    uint8_t start = TCNT0;
    uint8_t now = start;
    uint8_t last = now;

    // Now wait for each pin's time in turn..
    for ( i = 0; i < count; i++) {
     88a:	e3 94       	inc	r14
     88c:	e1 12       	cpse	r14, r17
     88e:	e5 cf       	rjmp	.-54     	; 0x85a <SoftwareServo::refresh()+0x14a>
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:76
    SoftwareServo *p;
    static unsigned long lastRefresh = 0;
    unsigned long m = millis();

    // if we haven't wrapped millis, and 20ms have not passed, then don't do anything
    if ( m >= lastRefresh && m < lastRefresh + 20) return;
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de be       	out	0x3e, r13	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd be       	out	0x3d, r12	; 61
C:\Users\zak\Documents\Arduino\libraries\SoftwareServo/SoftwareServo.cpp:128
		digitalWrite( s[i]->pin,0);
		break;
	    }
	}
    }
}
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de be       	out	0x3e, r13	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd be       	out	0x3d, r12	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	9f 90       	pop	r9
     8b8:	8f 90       	pop	r8
     8ba:	7f 90       	pop	r7
     8bc:	6f 90       	pop	r6
     8be:	08 95       	ret

000008c0 <USI_TWI_Master_Initialise>:
USI_TWI_Master_Initialise():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:56
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise(void)
{
	PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
     8c0:	69 9a       	sbi	0x0d, 1	; 13
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:57
	PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
     8c2:	49 9a       	sbi	0x09, 1	; 9
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:59

	DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
     8c4:	41 9a       	sbi	0x08, 1	; 8
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:60
	DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     8c6:	61 9a       	sbi	0x0c, 1	; 12
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:62

	USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
     8c8:	8f ef       	ldi	r24, 0xFF	; 255
     8ca:	8c bd       	out	0x2c, r24	; 44
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:63
	USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
     8cc:	8a e2       	ldi	r24, 0x2A	; 42
     8ce:	8a bd       	out	0x2a, r24	; 42
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:67
	        (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
	        (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
	        (0 << USITC);
	USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
     8d0:	80 ef       	ldi	r24, 0xF0	; 240
     8d2:	8b bd       	out	0x2b, r24	; 43
     8d4:	08 95       	ret

000008d6 <USI_TWI_Get_State_Info>:
USI_TWI_Get_State_Info():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:77
Use this function to get hold of the error message from the last transmission
---------------------------------------------------------------*/
unsigned char USI_TWI_Get_State_Info(void)
{
	return (USI_TWI_state.errorState); // Return error state.
}
     8d6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <USI_TWI_state>
     8da:	08 95       	ret

000008dc <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:226
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
	USISR = temp;                                          // Set USISR according to temp.
     8dc:	8b bd       	out	0x2b, r24	; 43
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
	       (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
	       (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
	       (1 << USITC);                                   // Toggle Clock Port.
	do {
		DELAY_T2TWI;
		USICR = temp; // Generate positve SCL edge.
     8de:	8b e2       	ldi	r24, 0x2B	; 43
_delay_us():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e0:	9e e0       	ldi	r25, 0x0E	; 14
     8e2:	9a 95       	dec	r25
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <USI_TWI_Master_Transfer+0x6>
USI_TWI_Master_Transfer():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:234
     8e6:	8a bd       	out	0x2a, r24	; 42
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:235 (discriminator 1)
		while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     8e8:	39 9b       	sbis	0x07, 1	; 7
     8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <USI_TWI_Master_Transfer+0xc>
_delay_us():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\util/delay.h:276
     8ec:	96 e0       	ldi	r25, 0x06	; 6
     8ee:	9a 95       	dec	r25
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <USI_TWI_Master_Transfer+0x12>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <USI_TWI_Master_Transfer+0x18>
USI_TWI_Master_Transfer():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:238
			; // Wait for SCL to go high.
		DELAY_T4TWI;
		USICR = temp;                   // Generate negative SCL edge.
     8f4:	8a bd       	out	0x2a, r24	; 42
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:239
	} while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
     8f6:	0b b4       	in	r0, 0x2b	; 43
     8f8:	06 fe       	sbrs	r0, 6
     8fa:	f2 cf       	rjmp	.-28     	; 0x8e0 <USI_TWI_Master_Transfer+0x4>
_delay_us():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\util/delay.h:276
     8fc:	8e e0       	ldi	r24, 0x0E	; 14
     8fe:	8a 95       	dec	r24
     900:	f1 f7       	brne	.-4      	; 0x8fe <USI_TWI_Master_Transfer+0x22>
USI_TWI_Master_Transfer():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:242

	DELAY_T2TWI;
	temp  = USIDR;                 // Read out data.
     902:	8c b5       	in	r24, 0x2c	; 44
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:243
	USIDR = 0xFF;                  // Release SDA.
     904:	9f ef       	ldi	r25, 0xFF	; 255
     906:	9c bd       	out	0x2c, r25	; 44
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:244
	DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     908:	61 9a       	sbi	0x0c, 1	; 12
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:247

	return temp; // Return the data from the USIDR
}
     90a:	08 95       	ret

0000090c <USI_TWI_Master_Stop>:
USI_TWI_Master_Stop():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:255
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
	PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
     90c:	69 98       	cbi	0x0d, 1	; 13
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:256
	PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
     90e:	49 9a       	sbi	0x09, 1	; 9
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:257 (discriminator 1)
	while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     910:	39 9b       	sbis	0x07, 1	; 7
     912:	fe cf       	rjmp	.-4      	; 0x910 <USI_TWI_Master_Stop+0x4>
_delay_us():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\util/delay.h:276
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	8a 95       	dec	r24
     918:	f1 f7       	brne	.-4      	; 0x916 <USI_TWI_Master_Stop+0xa>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <USI_TWI_Master_Stop+0x10>
USI_TWI_Master_Stop():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:260
		; // Wait for SCL to go high.
	DELAY_T4TWI;
	PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
     91c:	69 9a       	sbi	0x0d, 1	; 13
_delay_us():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\util/delay.h:276
     91e:	8e e0       	ldi	r24, 0x0E	; 14
     920:	8a 95       	dec	r24
     922:	f1 f7       	brne	.-4      	; 0x920 <USI_TWI_Master_Stop+0x14>
USI_TWI_Master_Stop():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:264
	DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
	if (!(USISR & (1 << USIPF))) {
     924:	9b b5       	in	r25, 0x2b	; 43
     926:	89 2f       	mov	r24, r25
     928:	80 72       	andi	r24, 0x20	; 32
     92a:	95 fd       	sbrc	r25, 5
     92c:	04 c0       	rjmp	.+8      	; 0x936 <USI_TWI_Master_Stop+0x2a>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:265
		USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     92e:	98 e0       	ldi	r25, 0x08	; 8
     930:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <USI_TWI_state>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:266
		return (FALSE);
     934:	08 95       	ret
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:270
	}
#endif

	return (TRUE);
     936:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:271
}
     938:	08 95       	ret

0000093a <USI_TWI_Start_Transceiver_With_Data_Stop>:
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:106
#ifndef __GNUC__
__x // AVR compiler
#endif
    unsigned char
    USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	16 2f       	mov	r17, r22
     946:	04 2f       	mov	r16, r20
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:115
	unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
	                               |                 // Prepare register value to: Clear flags, and
	                               (0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

	USI_TWI_state.errorState  = 0;
	USI_TWI_state.addressMode = TRUE;
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <USI_TWI_state>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:146
		return (FALSE);
	}
#endif

	if (!(*msg
	      & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
     94e:	fc 01       	movw	r30, r24
     950:	20 81       	ld	r18, Z
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:145
		USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
		return (FALSE);
	}
#endif

	if (!(*msg
     952:	20 fd       	sbrc	r18, 0
     954:	03 c0       	rjmp	.+6      	; 0x95c <USI_TWI_Start_Transceiver_With_Data_Stop+0x22>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:148
	      & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
	{
		USI_TWI_state.masterWriteDataMode = TRUE;
     956:	23 e0       	ldi	r18, 0x03	; 3
     958:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <USI_TWI_state>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:152
	}

	/* Release SCL to ensure that (repeated) Start can be performed */
	PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
     95c:	49 9a       	sbi	0x09, 1	; 9
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:153 (discriminator 1)
	while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     95e:	39 9b       	sbis	0x07, 1	; 7
     960:	fe cf       	rjmp	.-4      	; 0x95e <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
_delay_us():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\util/delay.h:276
     962:	f6 e0       	ldi	r31, 0x06	; 6
     964:	fa 95       	dec	r31
     966:	f1 f7       	brne	.-4      	; 0x964 <USI_TWI_Start_Transceiver_With_Data_Stop+0x2a>
     968:	00 c0       	rjmp	.+0      	; 0x96a <USI_TWI_Start_Transceiver_With_Data_Stop+0x30>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:162
#else
	DELAY_T2TWI; // Delay for T2TWI if TWI_STANDARD_MODE
#endif

	/* Generate Start Condition */
	PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
     96a:	69 98       	cbi	0x0d, 1	; 13
_delay_us():
c:\users\zak\appdata\local\arduino15\packages\arduino\tools\avr-gcc\4.9.2-atmel3.5.4-arduino2\avr\include\util/delay.h:276
     96c:	26 e0       	ldi	r18, 0x06	; 6
     96e:	2a 95       	dec	r18
     970:	f1 f7       	brne	.-4      	; 0x96e <USI_TWI_Start_Transceiver_With_Data_Stop+0x34>
     972:	00 c0       	rjmp	.+0      	; 0x974 <USI_TWI_Start_Transceiver_With_Data_Stop+0x3a>
USI_TWI_Start_Transceiver_With_Data_Stop():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:164
	DELAY_T4TWI;
	PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
     974:	49 98       	cbi	0x09, 1	; 9
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:165
	PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
     976:	69 9a       	sbi	0x0d, 1	; 13
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:168

#ifdef SIGNAL_VERIFY
	if (!(USISR & (1 << USISIF))) {
     978:	0b b4       	in	r0, 0x2b	; 43
     97a:	07 fc       	sbrc	r0, 7
     97c:	02 c0       	rjmp	.+4      	; 0x982 <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:169
		USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
     97e:	87 e0       	ldi	r24, 0x07	; 7
     980:	1a c0       	rjmp	.+52     	; 0x9b6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x7c>
     982:	ec 01       	movw	r28, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     984:	ff 24       	eor	r15, r15
     986:	fa 94       	dec	r15
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:177
#endif

	/*Write address and Read/Write data */
	do {
		/* If masterWrite cycle (or inital address tranmission)*/
		if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
     988:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <USI_TWI_state>
     98c:	83 70       	andi	r24, 0x03	; 3
     98e:	09 f1       	breq	.+66     	; 0x9d2 <USI_TWI_Start_Transceiver_With_Data_Stop+0x98>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:179
			/* Write a byte */
			PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
     990:	49 98       	cbi	0x09, 1	; 9
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:180
			USIDR = *(msg++);                        // Setup data.
     992:	88 81       	ld	r24, Y
     994:	8c bd       	out	0x2c, r24	; 44
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:181
			USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
     996:	80 ef       	ldi	r24, 0xF0	; 240
     998:	0e 94 6e 04 	call	0x8dc	; 0x8dc <USI_TWI_Master_Transfer>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:184

			/* Clock and verify (N)ACK from slave */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     99c:	61 98       	cbi	0x0c, 1	; 12
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:185
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
     99e:	8e ef       	ldi	r24, 0xFE	; 254
     9a0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <USI_TWI_Master_Transfer>
     9a4:	80 ff       	sbrs	r24, 0
     9a6:	0f c0       	rjmp	.+30     	; 0x9c6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8c>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:186
				if (USI_TWI_state.addressMode)
     9a8:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <USI_TWI_state>
     9ac:	89 2f       	mov	r24, r25
     9ae:	81 70       	andi	r24, 0x01	; 1
     9b0:	90 ff       	sbrs	r25, 0
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <USI_TWI_Start_Transceiver_With_Data_Stop+0x84>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:187
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     9b4:	86 e0       	ldi	r24, 0x06	; 6
     9b6:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <USI_TWI_state>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:190
				else
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
				return (FALSE);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	1f c0       	rjmp	.+62     	; 0x9fc <USI_TWI_Start_Transceiver_With_Data_Stop+0xc2>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:189
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
			if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
				if (USI_TWI_state.addressMode)
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
				else
					USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     9be:	95 e0       	ldi	r25, 0x05	; 5
     9c0:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <USI_TWI_state>
     9c4:	1b c0       	rjmp	.+54     	; 0x9fc <USI_TWI_Start_Transceiver_With_Data_Stop+0xc2>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:192
				return (FALSE);
			}
			USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
     9c6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <USI_TWI_state>
     9ca:	8e 7f       	andi	r24, 0xFE	; 254
     9cc:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <USI_TWI_state>
     9d0:	0d c0       	rjmp	.+26     	; 0x9ec <USI_TWI_Start_Transceiver_With_Data_Stop+0xb2>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:197
		}
		/* Else masterRead cycle*/
		else {
			/* Read a data byte */
			DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     9d2:	61 98       	cbi	0x0c, 1	; 12
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:198
			*(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
     9d4:	80 ef       	ldi	r24, 0xF0	; 240
     9d6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <USI_TWI_Master_Transfer>
     9da:	88 83       	st	Y, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:201

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if (msgSize == 1) // If transmission of last byte was performed.
     9dc:	11 30       	cpi	r17, 0x01	; 1
     9de:	11 f4       	brne	.+4      	; 0x9e4 <USI_TWI_Start_Transceiver_With_Data_Stop+0xaa>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:203
			{
				USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     9e0:	fc bc       	out	0x2c, r15	; 44
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <USI_TWI_Start_Transceiver_With_Data_Stop+0xac>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:205
			} else {
				USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
     9e4:	1c bc       	out	0x2c, r1	; 44
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:207
			}
			USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
     9e6:	8e ef       	ldi	r24, 0xFE	; 254
     9e8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <USI_TWI_Master_Transfer>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:209
		}
	} while (--msgSize); // Until all data sent/received.
     9ec:	11 50       	subi	r17, 0x01	; 1
     9ee:	21 96       	adiw	r28, 0x01	; 1
     9f0:	11 11       	cpse	r17, r1
     9f2:	ca cf       	rjmp	.-108    	; 0x988 <USI_TWI_Start_Transceiver_With_Data_Stop+0x4e>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:211

	if (stop) {
     9f4:	01 11       	cpse	r16, r1
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:212
		USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
     9f6:	0e 94 86 04 	call	0x90c	; 0x90c <USI_TWI_Master_Stop>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:216
	}

	/* Transmission successfully completed*/
	return (TRUE);
     9fa:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Master/USI_TWI_Master.c:217
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	08 95       	ret

00000a08 <USI_TWI_Transmit_Byte>:
USI_TWI_Transmit_Byte():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:153
// Check if there is an active data session.
unsigned char USI_TWI_Slave_Is_Active()
{
	// Active if Overflow Interrupt is enabled and no Stop Condition occurred
	return (USICR & (1 << USIOIE)) && ((USISR & (1 << USIPF)) == 0);
}
     a08:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <TWI_TxHead>
     a0c:	9f 5f       	subi	r25, 0xFF	; 255
     a0e:	9f 70       	andi	r25, 0x0F	; 15
     a10:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <TWI_TxTail>
     a14:	92 17       	cp	r25, r18
     a16:	e1 f3       	breq	.-8      	; 0xa10 <USI_TWI_Transmit_Byte+0x8>
     a18:	e9 2f       	mov	r30, r25
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ef 51       	subi	r30, 0x1F	; 31
     a1e:	fd 4f       	sbci	r31, 0xFD	; 253
     a20:	80 83       	st	Z, r24
     a22:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <TWI_TxHead>
     a26:	08 95       	ret

00000a28 <USI_TWI_Receive_Byte>:
USI_TWI_Receive_Byte():
     a28:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <TWI_RxTail>
     a2c:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <TWI_RxHead>
     a30:	98 17       	cp	r25, r24
     a32:	e1 f3       	breq	.-8      	; 0xa2c <USI_TWI_Receive_Byte+0x4>
     a34:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <TWI_RxTail>
     a38:	ef 5f       	subi	r30, 0xFF	; 255
     a3a:	ef 70       	andi	r30, 0x0F	; 15
     a3c:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <TWI_RxTail>
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ef 52       	subi	r30, 0x2F	; 47
     a44:	fd 4f       	sbci	r31, 0xFD	; 253
     a46:	80 81       	ld	r24, Z
     a48:	08 95       	ret

00000a4a <USI_TWI_Data_In_Receive_Buffer>:
USI_TWI_Data_In_Receive_Buffer():
     a4a:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <TWI_RxTail>
     a4e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <TWI_RxHead>
     a52:	89 1b       	sub	r24, r25
     a54:	8f 70       	andi	r24, 0x0F	; 15
     a56:	08 95       	ret

00000a58 <USI_TWI_Space_In_Transmission_Buffer>:
USI_TWI_Space_In_Transmission_Buffer():
     a58:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <TWI_TxHead>
     a5c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TWI_TxTail>
     a60:	9f 5f       	subi	r25, 0xFF	; 255
     a62:	89 1b       	sub	r24, r25
     a64:	8f 70       	andi	r24, 0x0F	; 15
     a66:	08 95       	ret

00000a68 <__vector_23>:
__vector_23():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     a68:	1f 92       	push	r1
     a6a:	0f 92       	push	r0
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	0f 92       	push	r0
     a70:	11 24       	eor	r1, r1
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	cf 93       	push	r28
     a8c:	ef 93       	push	r30
     a8e:	ff 93       	push	r31
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:169
	unsigned char tmpPin; // Temporary variable for pin state
	unsigned char tmpRxHead; // Temporary variable to store volatile
	// call slave receive callback on repeated start
	if (USI_TWI_On_Slave_Receive) {
     a90:	00 91 fc 01 	lds	r16, 0x01FC	; 0x8001fc <USI_TWI_On_Slave_Receive>
     a94:	10 91 fd 01 	lds	r17, 0x01FD	; 0x8001fd <USI_TWI_On_Slave_Receive+0x1>
     a98:	01 15       	cp	r16, r1
     a9a:	11 05       	cpc	r17, r1
     a9c:	69 f0       	breq	.+26     	; 0xab8 <__vector_23+0x50>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:170
		tmpRxHead = TWI_RxHead;
     a9e:	c0 91 f5 01 	lds	r28, 0x01F5	; 0x8001f5 <TWI_RxHead>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:171
		if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     aa2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <TWI_RxTail>
     aa6:	8c 17       	cp	r24, r28
     aa8:	39 f0       	breq	.+14     	; 0xab8 <__vector_23+0x50>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:172
			USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     aaa:	0e 94 25 05 	call	0xa4a	; 0xa4a <USI_TWI_Data_In_Receive_Buffer>
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	f8 01       	movw	r30, r16
     ab2:	09 95       	icall
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:174
			// reset rx buffer
			TWI_RxTail = tmpRxHead;
     ab4:	c0 93 f4 01 	sts	0x01F4, r28	; 0x8001f4 <TWI_RxTail>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:178
		}
	}

	USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     ab8:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <USI_TWI_Overflow_State>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:179
	DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     abc:	61 98       	cbi	0x0c, 1	; 12
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180 (discriminator 2)
	while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     abe:	39 9b       	sbis	0x07, 1	; 7
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__vector_23+0x62>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180 (discriminator 1)
     ac2:	59 9b       	sbis	0x0b, 1	; 11
     ac4:	fc cf       	rjmp	.-8      	; 0xabe <__vector_23+0x56>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
		; // Wait for SCL to go low to ensure the "Start Condition" has completed.
	      // If a Stop condition arises then leave the interrupt to prevent waiting forever.
	if (tmpPin) {
		// Stop Condition (waiting for next Start Condition)
		USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     ac6:	88 ea       	ldi	r24, 0xA8	; 168
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <__vector_23+0x64>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:192
		                                        // to first Start Condition (potentail failure)
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	} else {
		// really Start Condition (Enable Overflow Interrupt)
		USICR = (1 << USISIE) | (1 << USIOIE)
     aca:	88 ef       	ldi	r24, 0xF8	; 248
     acc:	8a bd       	out	0x2a, r24	; 42
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:198
		        | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
		        (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	}
	USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     ace:	80 ef       	ldi	r24, 0xF0	; 240
     ad0:	8b bd       	out	0x2b, r24	; 43
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:200
	        (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	cf 91       	pop	r28
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_24>:
__vector_24():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	cf 93       	push	r28
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
	unsigned char tmpRxHead;
	unsigned char tmpTxTail; // Temporary variables to store volatiles
	unsigned char tmpUSIDR;

	switch (USI_TWI_Overflow_State) {
     b22:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <USI_TWI_Overflow_State>
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	09 f4       	brne	.+2      	; 0xb2c <__vector_24+0x32>
     b2a:	4d c0       	rjmp	.+154    	; 0xbc6 <__vector_24+0xcc>
     b2c:	28 f4       	brcc	.+10     	; 0xb38 <__vector_24+0x3e>
     b2e:	88 23       	and	r24, r24
     b30:	59 f0       	breq	.+22     	; 0xb48 <__vector_24+0x4e>
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	59 f1       	breq	.+86     	; 0xb8c <__vector_24+0x92>
     b36:	86 c0       	rjmp	.+268    	; 0xc44 <__vector_24+0x14a>
     b38:	84 30       	cpi	r24, 0x04	; 4
     b3a:	09 f4       	brne	.+2      	; 0xb3e <__vector_24+0x44>
     b3c:	4a c0       	rjmp	.+148    	; 0xbd2 <__vector_24+0xd8>
     b3e:	18 f1       	brcs	.+70     	; 0xb86 <__vector_24+0x8c>
     b40:	85 30       	cpi	r24, 0x05	; 5
     b42:	09 f4       	brne	.+2      	; 0xb46 <__vector_24+0x4c>
     b44:	67 c0       	rjmp	.+206    	; 0xc14 <__vector_24+0x11a>
     b46:	7e c0       	rjmp	.+252    	; 0xc44 <__vector_24+0x14a>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221
	// ---------- Address mode ----------
	// Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
	case USI_SLAVE_CHECK_ADDRESS:
		if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     b48:	8c b5       	in	r24, 0x2c	; 44
     b4a:	88 23       	and	r24, r24
     b4c:	31 f0       	breq	.+12     	; 0xb5a <__vector_24+0x60>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221 (discriminator 1)
     b4e:	8c b5       	in	r24, 0x2c	; 44
     b50:	86 95       	lsr	r24
     b52:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <TWI_slaveAddress>
     b56:	89 13       	cpse	r24, r25
     b58:	31 c0       	rjmp	.+98     	; 0xbbc <__vector_24+0xc2>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:222
			if (USIDR & 0x01) {
     b5a:	0c b4       	in	r0, 0x2c	; 44
     b5c:	00 fe       	sbrs	r0, 0
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <__vector_24+0x80>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:223
				if (USI_TWI_On_Slave_Transmit) {
     b60:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <USI_TWI_On_Slave_Transmit>
     b64:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <USI_TWI_On_Slave_Transmit+0x1>
     b68:	30 97       	sbiw	r30, 0x00	; 0
     b6a:	29 f0       	breq	.+10     	; 0xb76 <__vector_24+0x7c>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:225
					// reset tx buffer and call callback
					tmpTxTail = TWI_TxHead;
     b6c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <TWI_TxHead>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:226
					TWI_TxTail = tmpTxTail;
     b70:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TWI_TxTail>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:227
					USI_TWI_On_Slave_Transmit();
     b74:	09 95       	icall
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:229
				}
				USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <__vector_24+0x82>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:231
			} else {
				USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     b7a:	84 e0       	ldi	r24, 0x04	; 4
     b7c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <USI_TWI_Overflow_State>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:233
			}
			SET_USI_TO_SEND_ACK();
     b80:	1c bc       	out	0x2c, r1	; 44
     b82:	61 9a       	sbi	0x0c, 1	; 12
     b84:	5d c0       	rjmp	.+186    	; 0xc40 <__vector_24+0x146>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:242
		break;

	// ----- Master write data mode ------
	// Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
	case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
		if (USIDR) // If NACK, the master does not want more data.
     b86:	8c b5       	in	r24, 0x2c	; 44
     b88:	81 11       	cpse	r24, r1
     b8a:	18 c0       	rjmp	.+48     	; 0xbbc <__vector_24+0xc2>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:253

	// Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
	case USI_SLAVE_SEND_DATA:

		// Get data from Buffer
		tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     b8c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TWI_TxTail>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:254
		if (TWI_TxHead != tmpTxTail) {
     b90:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <TWI_TxHead>
     b94:	98 17       	cp	r25, r24
     b96:	91 f0       	breq	.+36     	; 0xbbc <__vector_24+0xc2>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:255
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     b98:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TWI_TxTail>
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	8f 70       	andi	r24, 0x0F	; 15
     ba0:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TWI_TxTail>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:256
			USIDR      = TWI_TxBuf[TWI_TxTail];
     ba4:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <TWI_TxTail>
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ef 51       	subi	r30, 0x1F	; 31
     bac:	fd 4f       	sbci	r31, 0xFD	; 253
     bae:	80 81       	ld	r24, Z
     bb0:	8c bd       	out	0x2c, r24	; 44
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:262
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
			return;
		}
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <USI_TWI_Overflow_State>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:263
		SET_USI_TO_SEND_DATA();
     bb8:	61 9a       	sbi	0x0c, 1	; 12
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <__vector_24+0xc8>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:259
		if (TWI_TxHead != tmpTxTail) {
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
			USIDR      = TWI_TxBuf[TWI_TxTail];
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
     bbc:	61 98       	cbi	0x0c, 1	; 12
     bbe:	88 ea       	ldi	r24, 0xA8	; 168
     bc0:	8a bd       	out	0x2a, r24	; 42
     bc2:	80 e7       	ldi	r24, 0x70	; 112
     bc4:	3e c0       	rjmp	.+124    	; 0xc42 <__vector_24+0x148>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:268
		SET_USI_TO_SEND_DATA();
		break;

	// Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
	case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <USI_TWI_Overflow_State>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:269
		SET_USI_TO_READ_ACK();
     bcc:	61 98       	cbi	0x0c, 1	; 12
     bce:	1c bc       	out	0x2c, r1	; 44
     bd0:	37 c0       	rjmp	.+110    	; 0xc40 <__vector_24+0x146>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:275
		break;

	// ----- Master read data mode ------
	// Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
	case USI_SLAVE_REQUEST_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <USI_TWI_Overflow_State>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276
		SET_USI_TO_READ_DATA();
     bd8:	61 98       	cbi	0x0c, 1	; 12
     bda:	80 e7       	ldi	r24, 0x70	; 112
     bdc:	8b bd       	out	0x2b, r24	; 43
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:278
		// call slave receive callback on stop condition
		if (USI_TWI_On_Slave_Receive) {
     bde:	00 91 fc 01 	lds	r16, 0x01FC	; 0x8001fc <USI_TWI_On_Slave_Receive>
     be2:	10 91 fd 01 	lds	r17, 0x01FD	; 0x8001fd <USI_TWI_On_Slave_Receive+0x1>
     be6:	01 15       	cp	r16, r1
     be8:	11 05       	cpc	r17, r1
     bea:	61 f1       	breq	.+88     	; 0xc44 <__vector_24+0x14a>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:279
			tmpRxHead = TWI_RxHead;
     bec:	c0 91 f5 01 	lds	r28, 0x01F5	; 0x8001f5 <TWI_RxHead>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:280
			if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     bf0:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <TWI_RxTail>
     bf4:	8c 17       	cp	r24, r28
     bf6:	31 f1       	breq	.+76     	; 0xc44 <__vector_24+0x14a>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:282 (discriminator 1)
				// check for stop Condition
				while ((USISR & ((1 << USI_START_COND_INT) | (1 << USIPF) | (0xE << USICNT0))) == 0)
     bf8:	8b b5       	in	r24, 0x2b	; 43
     bfa:	8e 7a       	andi	r24, 0xAE	; 174
     bfc:	e9 f3       	breq	.-6      	; 0xbf8 <__vector_24+0xfe>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:285
					;// wait for either Start or Stop Condition
					// cancel after one SCL cycle
				if (USISR & (1 << USIPF)) { // Stop Condition
     bfe:	0b b4       	in	r0, 0x2b	; 43
     c00:	05 fe       	sbrs	r0, 5
     c02:	20 c0       	rjmp	.+64     	; 0xc44 <__vector_24+0x14a>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:286
					USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     c04:	0e 94 25 05 	call	0xa4a	; 0xa4a <USI_TWI_Data_In_Receive_Buffer>
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	f8 01       	movw	r30, r16
     c0c:	09 95       	icall
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:288
					// reset rx buffer
					TWI_RxTail = tmpRxHead;
     c0e:	c0 93 f4 01 	sts	0x01F4, r28	; 0x8001f4 <TWI_RxTail>
     c12:	18 c0       	rjmp	.+48     	; 0xc44 <__vector_24+0x14a>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:297
		break;

	// Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
	case USI_SLAVE_GET_DATA_AND_SEND_ACK:
		// Put data into Buffer
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <USI_TWI_Overflow_State>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:298
		tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     c1a:	9c b5       	in	r25, 0x2c	; 44
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:299
		tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     c1c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <TWI_RxHead>
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:300
		if (TWI_RxTail != tmpRxHead) {
     c24:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <TWI_RxTail>
     c28:	28 17       	cp	r18, r24
     c2a:	49 f0       	breq	.+18     	; 0xc3e <__vector_24+0x144>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:301
			TWI_RxHead            = tmpRxHead;
     c2c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <TWI_RxHead>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
			TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     c30:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <TWI_RxHead>
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ef 52       	subi	r30, 0x2F	; 47
     c38:	fd 4f       	sbci	r31, 0xFD	; 253
     c3a:	90 83       	st	Z, r25
     c3c:	a1 cf       	rjmp	.-190    	; 0xb80 <__vector_24+0x86>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
			SET_USI_TO_SEND_ACK();
		} else // If the buffer is full then:
		{
			SET_USI_TO_SEND_NACK();
     c3e:	61 98       	cbi	0x0c, 1	; 12
     c40:	8e e7       	ldi	r24, 0x7E	; 126
     c42:	8b bd       	out	0x2b, r24	; 43
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:310
		}
		break;
	}
}
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	cf 91       	pop	r28
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	7f 91       	pop	r23
     c54:	6f 91       	pop	r22
     c56:	5f 91       	pop	r21
     c58:	4f 91       	pop	r20
     c5a:	3f 91       	pop	r19
     c5c:	2f 91       	pop	r18
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:536
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const char *str) {
  if (str == NULL) return 0;
  return write((const uint8_t *)str, strlen(str));
}
     c6c:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <TwoWire::BufferIndex>
     c70:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <TwoWire::BufferLength>
     c74:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <TwoWire::transmitting>
     c78:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <USI_TWI_Master_Initialise>

00000c7c <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <TwoWire::transmitting>
     c82:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <TwoWire::Buffer>
     c86:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <TwoWire::Buffer+0x1>
     c8a:	66 0f       	add	r22, r22
     c8c:	60 83       	st	Z, r22
     c8e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TwoWire::BufferIndex>
     c92:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <TwoWire::BufferLength>
     c96:	08 95       	ret

00000c98 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
     c98:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <TwoWire::beginTransmission(unsigned char)>

00000c9c <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
     c9c:	46 2f       	mov	r20, r22
     c9e:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <TwoWire::BufferLength>
     ca2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <TwoWire::Buffer>
     ca6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TwoWire::Buffer+0x1>
     caa:	0e 94 9d 04 	call	0x93a	; 0x93a <USI_TWI_Start_Transceiver_With_Data_Stop>
     cae:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <TwoWire::BufferIndex>
     cb2:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <TwoWire::BufferLength>
     cb6:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <TwoWire::transmitting>
     cba:	81 11       	cpse	r24, r1
     cbc:	0f c0       	rjmp	.+30     	; 0xcdc <TwoWire::endTransmission(unsigned char)+0x40>
     cbe:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <USI_TWI_Get_State_Info>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	39 f0       	breq	.+14     	; 0xcd4 <TwoWire::endTransmission(unsigned char)+0x38>
     cc6:	86 30       	cpi	r24, 0x06	; 6
     cc8:	19 f0       	breq	.+6      	; 0xcd0 <TwoWire::endTransmission(unsigned char)+0x34>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	29 f4       	brne	.+10     	; 0xcd8 <TwoWire::endTransmission(unsigned char)+0x3c>
     cce:	08 95       	ret
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	08 95       	ret
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	08 95       	ret
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	08 95       	ret
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	08 95       	ret

00000ce0 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <TwoWire::endTransmission(unsigned char)>

00000ce6 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
     ce6:	cf 93       	push	r28
     ce8:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <TwoWire::transmitting>
     cec:	88 23       	and	r24, r24
     cee:	c1 f0       	breq	.+48     	; 0xd20 <TwoWire::write(unsigned char)+0x3a>
     cf0:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <TwoWire::BufferLength>
     cf4:	80 32       	cpi	r24, 0x20	; 32
     cf6:	18 f0       	brcs	.+6      	; 0xcfe <TwoWire::write(unsigned char)+0x18>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <TwoWire::write(unsigned char)+0x4e>
     cfe:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TwoWire::BufferIndex>
     d02:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <TwoWire::Buffer>
     d06:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <TwoWire::Buffer+0x1>
     d0a:	e8 0f       	add	r30, r24
     d0c:	f1 1d       	adc	r31, r1
     d0e:	60 83       	st	Z, r22
     d10:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TwoWire::BufferIndex>
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TwoWire::BufferIndex>
     d1a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <TwoWire::BufferLength>
     d1e:	08 c0       	rjmp	.+16     	; 0xd30 <TwoWire::write(unsigned char)+0x4a>
     d20:	c6 2f       	mov	r28, r22
     d22:	0e 94 2c 05 	call	0xa58	; 0xa58 <USI_TWI_Space_In_Transmission_Buffer>
     d26:	88 23       	and	r24, r24
     d28:	39 f3       	breq	.-50     	; 0xcf8 <TwoWire::write(unsigned char)+0x12>
     d2a:	8c 2f       	mov	r24, r28
     d2c:	0e 94 04 05 	call	0xa08	; 0xa08 <USI_TWI_Transmit_Byte>
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
     d38:	4f 92       	push	r4
     d3a:	5f 92       	push	r5
     d3c:	6f 92       	push	r6
     d3e:	7f 92       	push	r7
     d40:	af 92       	push	r10
     d42:	bf 92       	push	r11
     d44:	cf 92       	push	r12
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	5c 01       	movw	r10, r24
     d54:	f6 2e       	mov	r15, r22
     d56:	c4 2f       	mov	r28, r20
     d58:	28 01       	movw	r4, r16
     d5a:	39 01       	movw	r6, r18
     d5c:	ee 20       	and	r14, r14
     d5e:	f9 f0       	breq	.+62     	; 0xd9e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
     d60:	0e 94 3e 06 	call	0xc7c	; 0xc7c <TwoWire::beginTransmission(unsigned char)>
     d64:	de 2d       	mov	r29, r14
     d66:	d4 30       	cpi	r29, 0x04	; 4
     d68:	08 f0       	brcs	.+2      	; 0xd6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
     d6a:	d3 e0       	ldi	r29, 0x03	; 3
     d6c:	d1 50       	subi	r29, 0x01	; 1
     d6e:	98 f0       	brcs	.+38     	; 0xd96 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x5e>
     d70:	8d 2f       	mov	r24, r29
     d72:	88 0f       	add	r24, r24
     d74:	88 0f       	add	r24, r24
     d76:	88 0f       	add	r24, r24
     d78:	a3 01       	movw	r20, r6
     d7a:	92 01       	movw	r18, r4
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
     d7e:	56 95       	lsr	r21
     d80:	47 95       	ror	r20
     d82:	37 95       	ror	r19
     d84:	27 95       	ror	r18
     d86:	8a 95       	dec	r24
     d88:	d2 f7       	brpl	.-12     	; 0xd7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
     d8a:	ca 01       	movw	r24, r20
     d8c:	b9 01       	movw	r22, r18
     d8e:	c5 01       	movw	r24, r10
     d90:	0e 94 73 06 	call	0xce6	; 0xce6 <TwoWire::write(unsigned char)>
     d94:	eb cf       	rjmp	.-42     	; 0xd6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	c5 01       	movw	r24, r10
     d9a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <TwoWire::endTransmission(unsigned char)>
     d9e:	cf 5f       	subi	r28, 0xFF	; 255
     da0:	c1 32       	cpi	r28, 0x21	; 33
     da2:	08 f0       	brcs	.+2      	; 0xda6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
     da4:	c0 e2       	ldi	r28, 0x20	; 32
     da6:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <TwoWire::Buffer>
     daa:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <TwoWire::Buffer+0x1>
     dae:	8f 2d       	mov	r24, r15
     db0:	88 0f       	add	r24, r24
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	80 83       	st	Z, r24
     db6:	4c 2d       	mov	r20, r12
     db8:	6c 2f       	mov	r22, r28
     dba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <TwoWire::Buffer>
     dbe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TwoWire::Buffer+0x1>
     dc2:	0e 94 9d 04 	call	0x93a	; 0x93a <USI_TWI_Start_Transceiver_With_Data_Stop>
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <TwoWire::BufferIndex>
     dcc:	81 11       	cpse	r24, r1
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x9e>
     dd0:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <TwoWire::BufferLength>
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0xa6>
     dd6:	c0 93 fa 01 	sts	0x01FA, r28	; 0x8001fa <TwoWire::BufferLength>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	8c 0f       	add	r24, r28
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	7f 90       	pop	r7
     df2:	6f 90       	pop	r6
     df4:	5f 90       	pop	r5
     df6:	4f 90       	pop	r4
     df8:	08 95       	ret

00000dfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
     dfa:	cf 92       	push	r12
     dfc:	ef 92       	push	r14
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	c2 2e       	mov	r12, r18
     e04:	e1 2c       	mov	r14, r1
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	98 01       	movw	r18, r16
     e0c:	0e 94 9c 06 	call	0xd38	; 0xd38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ef 90       	pop	r14
     e16:	cf 90       	pop	r12
     e18:	08 95       	ret

00000e1a <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00000e20 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:542

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     e20:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <TwoWire::BufferLength>
     e24:	88 23       	and	r24, r24
     e26:	31 f0       	breq	.+12     	; 0xe34 <TwoWire::available()+0x14>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:543
    return BufferLength - BufferIndex;
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <TwoWire::BufferIndex>
     e2e:	82 1b       	sub	r24, r18
     e30:	91 09       	sbc	r25, r1
     e32:	08 95       	ret
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:545
  } else {
    return USI_TWI_Data_In_Receive_Buffer();
     e34:	0e 94 25 05 	call	0xa4a	; 0xa4a <USI_TWI_Data_In_Receive_Buffer>
     e38:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:547
  }
}
     e3a:	08 95       	ret

00000e3c <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:556
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     e3c:	0e 94 10 07 	call	0xe20	; 0xe20 <TwoWire::available()>
     e40:	89 2b       	or	r24, r25
     e42:	b1 f0       	breq	.+44     	; 0xe70 <TwoWire::read()+0x34>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:557
    if (BufferLength) {
     e44:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <TwoWire::BufferLength>
     e48:	88 23       	and	r24, r24
     e4a:	71 f0       	breq	.+28     	; 0xe68 <TwoWire::read()+0x2c>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:558
      value = Buffer[BufferIndex];
     e4c:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <TwoWire::BufferIndex>
     e50:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <TwoWire::Buffer>
     e54:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <TwoWire::Buffer+0x1>
     e58:	e2 0f       	add	r30, r18
     e5a:	f1 1d       	adc	r31, r1
     e5c:	80 81       	ld	r24, Z
     e5e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:559
      ++BufferIndex;
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	20 93 fb 01 	sts	0x01FB, r18	; 0x8001fb <TwoWire::BufferIndex>
     e66:	08 95       	ret
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:561
    } else {
      value = USI_TWI_Receive_Byte();
     e68:	0e 94 14 05 	call	0xa28	; 0xa28 <USI_TWI_Receive_Byte>
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:553

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:566
      value = USI_TWI_Receive_Byte();
    }
  }

  return value;
}
     e74:	08 95       	ret

00000e76 <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:327
            Wire.write(dectobcd(t[3]) | (flags[3] << 7) | (flags[4] << 6));
        } else
            Wire.write(dectobcd(t[i]) | (flags[i] << 7));
    }

    Wire.endTransmission();
     e76:	0c 94 73 06 	jmp	0xce6	; 0xce6 <TwoWire::write(unsigned char)>

00000e7a <DS3231_set_addr(unsigned char, unsigned char)>:
_Z15DS3231_set_addrhh():
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	d8 2f       	mov	r29, r24
     e80:	c6 2f       	mov	r28, r22
     e82:	68 e6       	ldi	r22, 0x68	; 104
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	88 ef       	ldi	r24, 0xF8	; 248
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 4c 06 	call	0xc98	; 0xc98 <TwoWire::beginTransmission(int)>
     e8e:	6d 2f       	mov	r22, r29
     e90:	88 ef       	ldi	r24, 0xF8	; 248
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	0e 94 73 06 	call	0xce6	; 0xce6 <TwoWire::write(unsigned char)>
     e98:	6c 2f       	mov	r22, r28
     e9a:	88 ef       	ldi	r24, 0xF8	; 248
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 73 06 	call	0xce6	; 0xce6 <TwoWire::write(unsigned char)>
     ea2:	88 ef       	ldi	r24, 0xF8	; 248
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	0c 94 70 06 	jmp	0xce0	; 0xce0 <TwoWire::endTransmission()>

00000eae <DS3231_get_addr(unsigned char)>:
_Z15DS3231_get_addrh():
     eae:	cf 92       	push	r12
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	f8 2e       	mov	r15, r24
     eb8:	68 e6       	ldi	r22, 0x68	; 104
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	88 ef       	ldi	r24, 0xF8	; 248
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 4c 06 	call	0xc98	; 0xc98 <TwoWire::beginTransmission(int)>
     ec4:	6f 2d       	mov	r22, r15
     ec6:	88 ef       	ldi	r24, 0xF8	; 248
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 73 06 	call	0xce6	; 0xce6 <TwoWire::write(unsigned char)>
     ece:	88 ef       	ldi	r24, 0xF8	; 248
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 70 06 	call	0xce0	; 0xce0 <TwoWire::endTransmission()>
     ed6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <millis>
     eda:	6b 01       	movw	r12, r22
     edc:	7c 01       	movw	r14, r24
     ede:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <millis>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	8c 19       	sub	r24, r12
     ee8:	9d 09       	sbc	r25, r13
     eea:	ae 09       	sbc	r26, r14
     eec:	bf 09       	sbc	r27, r15
     eee:	84 36       	cpi	r24, 0x64	; 100
     ef0:	91 05       	cpc	r25, r1
     ef2:	a1 05       	cpc	r26, r1
     ef4:	b1 05       	cpc	r27, r1
     ef6:	88 f4       	brcc	.+34     	; 0xf1a <DS3231_get_addr(unsigned char)+0x6c>
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	68 e6       	ldi	r22, 0x68	; 104
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	88 ef       	ldi	r24, 0xF8	; 248
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	0e 94 0d 07 	call	0xe1a	; 0xe1a <TwoWire::requestFrom(int, int)>
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	49 f0       	breq	.+18     	; 0xf1e <DS3231_get_addr(unsigned char)+0x70>
     f0c:	62 e0       	ldi	r22, 0x02	; 2
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
     f18:	e2 cf       	rjmp	.-60     	; 0xede <DS3231_get_addr(unsigned char)+0x30>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <DS3231_get_addr(unsigned char)+0x78>
     f1e:	88 ef       	ldi	r24, 0xF8	; 248
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TwoWire::read()>
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	08 95       	ret

00000f30 <DS3231_set_creg(unsigned char)>:
_Z15DS3231_set_cregh():
     f30:	68 2f       	mov	r22, r24
     f32:	8e e0       	ldi	r24, 0x0E	; 14
     f34:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <DS3231_set_addr(unsigned char, unsigned char)>

00000f38 <DS3231_set_sreg(unsigned char)>:
_Z15DS3231_set_sregh():
     f38:	68 2f       	mov	r22, r24
     f3a:	8f e0       	ldi	r24, 0x0F	; 15
     f3c:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <DS3231_set_addr(unsigned char, unsigned char)>

00000f40 <DS3231_get_sreg()>:
_Z15DS3231_get_sregv():
     f40:	8f e0       	ldi	r24, 0x0F	; 15
     f42:	0c 94 57 07 	jmp	0xeae	; 0xeae <DS3231_get_addr(unsigned char)>

00000f46 <DS3231_set_32kHz_output(unsigned char)>:
_Z23DS3231_set_32kHz_outputh():
     f46:	88 23       	and	r24, r24
     f48:	29 f0       	breq	.+10     	; 0xf54 <DS3231_set_32kHz_output(unsigned char)+0xe>
     f4a:	0e 94 a0 07 	call	0xf40	; 0xf40 <DS3231_get_sreg()>
     f4e:	8f 77       	andi	r24, 0x7F	; 127
     f50:	88 60       	ori	r24, 0x08	; 8
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <DS3231_set_32kHz_output(unsigned char)+0x14>
     f54:	0e 94 a0 07 	call	0xf40	; 0xf40 <DS3231_get_sreg()>
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <DS3231_set_sreg(unsigned char)>

00000f5e <DS3231_init(unsigned char)>:
_Z11DS3231_inith():
     f5e:	0e 94 98 07 	call	0xf30	; 0xf30 <DS3231_set_creg(unsigned char)>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <DS3231_set_32kHz_output(unsigned char)>

00000f68 <DS3231_clear_a2f()>:
_Z16DS3231_clear_a2fv():
     f68:	0e 94 a0 07 	call	0xf40	; 0xf40 <DS3231_get_sreg()>
     f6c:	8d 7f       	andi	r24, 0xFD	; 253
     f6e:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <DS3231_set_sreg(unsigned char)>

00000f72 <dectobcd(unsigned char)>:
_Z8dectobcdh():
     f72:	6a e0       	ldi	r22, 0x0A	; 10
     f74:	0e 94 9a 10 	call	0x2134	; 0x2134 <__udivmodqi4>
     f78:	82 95       	swap	r24
     f7a:	80 7f       	andi	r24, 0xF0	; 240
     f7c:	89 0f       	add	r24, r25
     f7e:	08 95       	ret

00000f80 <DS3231_set_a2(unsigned char, unsigned char, unsigned char, unsigned char const*)>:
_Z13DS3231_set_a2hhhPKh():
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:385
    return  DS3231_get_sreg() & DS3231_STATUS_A1F;
}

// flags are: A2M2 (minutes), A2M3 (hour), A2M4 (day) 0 to enable, 1 to disable, DY/DT (dayofweek == 1/dayofmonth == 0) - 
void DS3231_set_a2(const uint8_t mi, const uint8_t h, const uint8_t d, const uint8_t * flags)
{
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <DS3231_set_a2(unsigned char, unsigned char, unsigned char, unsigned char const*)+0x10>
     f90:	1f 92       	push	r1
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	d4 2e       	mov	r13, r20
     f98:	89 01       	movw	r16, r18
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:386
    uint8_t t[3] = { mi, h, d };
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	6a 83       	std	Y+2, r22	; 0x02
     f9e:	4b 83       	std	Y+3, r20	; 0x03
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:389
    uint8_t i;

    Wire.beginTransmission(DS3231_I2C_ADDR);
     fa0:	68 e6       	ldi	r22, 0x68	; 104
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	88 ef       	ldi	r24, 0xF8	; 248
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 4c 06 	call	0xc98	; 0xc98 <TwoWire::beginTransmission(int)>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:390
    Wire.write(DS3231_ALARM2_ADDR);
     fac:	6b e0       	ldi	r22, 0x0B	; 11
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	88 ef       	ldi	r24, 0xF8	; 248
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0e 94 3b 07 	call	0xe76	; 0xe76 <TwoWire::write(int)>
     fb8:	e1 2c       	mov	r14, r1
     fba:	f1 2c       	mov	r15, r1
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:393

    for (i = 0; i <= 2; i++) {
        if (i == 2) {
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	e8 16       	cp	r14, r24
     fc0:	f1 04       	cpc	r15, r1
     fc2:	b9 f4       	brne	.+46     	; 0xff2 <DS3231_set_a2(unsigned char, unsigned char, unsigned char, unsigned char const*)+0x72>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:394
            Wire.write(dectobcd(t[2]) | (flags[2] << 7) | (flags[3] << 6));
     fc4:	8d 2d       	mov	r24, r13
     fc6:	0e 94 b9 07 	call	0xf72	; 0xf72 <dectobcd(unsigned char)>
     fca:	f8 01       	movw	r30, r16
     fcc:	63 81       	ldd	r22, Z+3	; 0x03
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	9b 01       	movw	r18, r22
     fd2:	46 e0       	ldi	r20, 0x06	; 6
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	4a 95       	dec	r20
     fda:	e1 f7       	brne	.-8      	; 0xfd4 <DS3231_set_a2(unsigned char, unsigned char, unsigned char, unsigned char const*)+0x54>
     fdc:	92 81       	ldd	r25, Z+2	; 0x02
     fde:	69 2f       	mov	r22, r25
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	76 95       	lsr	r23
     fe4:	76 2f       	mov	r23, r22
     fe6:	66 27       	eor	r22, r22
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	62 2b       	or	r22, r18
     fee:	73 2b       	or	r23, r19
     ff0:	13 c0       	rjmp	.+38     	; 0x1018 <DS3231_set_a2(unsigned char, unsigned char, unsigned char, unsigned char const*)+0x98>
     ff2:	e1 e0       	ldi	r30, 0x01	; 1
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	ec 0f       	add	r30, r28
     ff8:	fd 1f       	adc	r31, r29
     ffa:	ee 0d       	add	r30, r14
     ffc:	ff 1d       	adc	r31, r15
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:396
        } else
            Wire.write(dectobcd(t[i]) | (flags[i] << 7));
     ffe:	80 81       	ld	r24, Z
    1000:	0e 94 b9 07 	call	0xf72	; 0xf72 <dectobcd(unsigned char)>
    1004:	f8 01       	movw	r30, r16
    1006:	ee 0d       	add	r30, r14
    1008:	ff 1d       	adc	r31, r15
    100a:	60 81       	ld	r22, Z
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	76 95       	lsr	r23
    1010:	76 2f       	mov	r23, r22
    1012:	66 27       	eor	r22, r22
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	68 2b       	or	r22, r24
    101a:	88 ef       	ldi	r24, 0xF8	; 248
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	0e 94 3b 07 	call	0xe76	; 0xe76 <TwoWire::write(int)>
    1022:	ff ef       	ldi	r31, 0xFF	; 255
    1024:	ef 1a       	sub	r14, r31
    1026:	ff 0a       	sbc	r15, r31
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:392
    uint8_t i;

    Wire.beginTransmission(DS3231_I2C_ADDR);
    Wire.write(DS3231_ALARM2_ADDR);

    for (i = 0; i <= 2; i++) {
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	e8 16       	cp	r14, r24
    102c:	f1 04       	cpc	r15, r1
    102e:	31 f6       	brne	.-116    	; 0xfbc <DS3231_set_a2(unsigned char, unsigned char, unsigned char, unsigned char const*)+0x3c>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:399
            Wire.write(dectobcd(t[2]) | (flags[2] << 7) | (flags[3] << 6));
        } else
            Wire.write(dectobcd(t[i]) | (flags[i] << 7));
    }

    Wire.endTransmission();
    1030:	88 ef       	ldi	r24, 0xF8	; 248
    1032:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:400
}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:399
            Wire.write(dectobcd(t[2]) | (flags[2] << 7) | (flags[3] << 6));
        } else
            Wire.write(dectobcd(t[i]) | (flags[i] << 7));
    }

    Wire.endTransmission();
    1048:	0c 94 70 06 	jmp	0xce0	; 0xce0 <TwoWire::endTransmission()>

0000104c <bcdtodec(unsigned char)>:
_Z8bcdtodech():
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:495
{
    return ((val / 10 * 16) + (val % 10));
}

uint8_t bcdtodec(const uint8_t val)
{
    104c:	98 2f       	mov	r25, r24
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:496
    return ((val / 16 * 10) + (val % 16));
    104e:	82 95       	swap	r24
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	6a e0       	ldi	r22, 0x0A	; 10
    1054:	0e 94 91 10 	call	0x2122	; 0x2122 <__mulqi3>
    1058:	9f 70       	andi	r25, 0x0F	; 15
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:497
}
    105a:	89 0f       	add	r24, r25
    105c:	08 95       	ret

0000105e <DS3231_get(ts*)>:
_Z10DS3231_getP2ts():
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:94
    }
    Wire.endTransmission();
}

void DS3231_get(struct ts *t)
{
    105e:	bf 92       	push	r11
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	27 97       	sbiw	r28, 0x07	; 7
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	8c 01       	movw	r16, r24
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:100
    uint8_t TimeDate[7];        //second,minute,hour,dow,day,month,year
    uint8_t century = 0;
    uint8_t i, n;
    uint16_t year_full;

    Wire.beginTransmission(DS3231_I2C_ADDR);
    1082:	68 e6       	ldi	r22, 0x68	; 104
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	88 ef       	ldi	r24, 0xF8	; 248
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	0e 94 4c 06 	call	0xc98	; 0xc98 <TwoWire::beginTransmission(int)>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:101
    Wire.write(DS3231_TIME_CAL_ADDR);
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	88 ef       	ldi	r24, 0xF8	; 248
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 3b 07 	call	0xe76	; 0xe76 <TwoWire::write(int)>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:102
    Wire.endTransmission();
    109a:	88 ef       	ldi	r24, 0xF8	; 248
    109c:	91 e0       	ldi	r25, 0x01	; 1
    109e:	0e 94 70 06 	call	0xce0	; 0xce0 <TwoWire::endTransmission()>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:105

	uint8_t gotData = false;
	uint32_t start = millis(); // start timeout
    10a2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <millis>
    10a6:	6b 01       	movw	r12, r22
    10a8:	7c 01       	movw	r14, r24
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:106
	while(millis()-start < DS3231_TRANSACTION_TIMEOUT){
    10aa:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <millis>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	8c 19       	sub	r24, r12
    10b4:	9d 09       	sbc	r25, r13
    10b6:	ae 09       	sbc	r26, r14
    10b8:	bf 09       	sbc	r27, r15
    10ba:	84 36       	cpi	r24, 0x64	; 100
    10bc:	91 05       	cpc	r25, r1
    10be:	a1 05       	cpc	r26, r1
    10c0:	b1 05       	cpc	r27, r1
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <DS3231_get(ts*)+0x68>
    10c4:	4f c0       	rjmp	.+158    	; 0x1164 <DS3231_get(ts*)+0x106>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:107
	  if (Wire.requestFrom(DS3231_I2C_ADDR, 7) == 7) {
    10c6:	47 e0       	ldi	r20, 0x07	; 7
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	68 e6       	ldi	r22, 0x68	; 104
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	88 ef       	ldi	r24, 0xF8	; 248
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <TwoWire::requestFrom(int, int)>
    10d6:	87 30       	cpi	r24, 0x07	; 7
    10d8:	39 f0       	breq	.+14     	; 0x10e8 <DS3231_get(ts*)+0x8a>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:111
      	gotData = true;
      	break;
      }
      delay(2);
    10da:	62 e0       	ldi	r22, 0x02	; 2
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <delay>
    10e6:	e1 cf       	rjmp	.-62     	; 0x10aa <DS3231_get(ts*)+0x4c>
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	6c 01       	movw	r12, r24
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:107
    Wire.endTransmission();

	uint8_t gotData = false;
	uint32_t start = millis(); // start timeout
	while(millis()-start < DS3231_TRANSACTION_TIMEOUT){
	  if (Wire.requestFrom(DS3231_I2C_ADDR, 7) == 7) {
    10ee:	f1 2c       	mov	r15, r1
    10f0:	b1 2c       	mov	r11, r1
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:117
    }
	if (!gotData)
    	return; // error timeout
    
    for (i = 0; i <= 6; i++) {
        n = Wire.read();
    10f2:	88 ef       	ldi	r24, 0xF8	; 248
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TwoWire::read()>
    10fa:	e8 2e       	mov	r14, r24
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:118
        if (i == 5) {
    10fc:	95 e0       	ldi	r25, 0x05	; 5
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:119
            TimeDate[5] = bcdtodec(n & 0x1F);
    10fe:	8e 2d       	mov	r24, r14
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:118
	if (!gotData)
    	return; // error timeout
    
    for (i = 0; i <= 6; i++) {
        n = Wire.read();
        if (i == 5) {
    1100:	f9 12       	cpse	r15, r25
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <DS3231_get(ts*)+0xb8>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:119
            TimeDate[5] = bcdtodec(n & 0x1F);
    1104:	8f 71       	andi	r24, 0x1F	; 31
    1106:	0e 94 26 08 	call	0x104c	; 0x104c <bcdtodec(unsigned char)>
    110a:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:120
            century = (n & 0x80) >> 7;
    110c:	be 2c       	mov	r11, r14
    110e:	bb 1c       	adc	r11, r11
    1110:	bb 24       	eor	r11, r11
    1112:	bb 1c       	adc	r11, r11
    1114:	04 c0       	rjmp	.+8      	; 0x111e <DS3231_get(ts*)+0xc0>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:122
        } else
            TimeDate[i] = bcdtodec(n);
    1116:	0e 94 26 08 	call	0x104c	; 0x104c <bcdtodec(unsigned char)>
    111a:	f6 01       	movw	r30, r12
    111c:	80 83       	st	Z, r24
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:116 (discriminator 2)
      delay(2);
    }
	if (!gotData)
    	return; // error timeout
    
    for (i = 0; i <= 6; i++) {
    111e:	f3 94       	inc	r15
    1120:	ff ef       	ldi	r31, 0xFF	; 255
    1122:	cf 1a       	sub	r12, r31
    1124:	df 0a       	sbc	r13, r31
    1126:	87 e0       	ldi	r24, 0x07	; 7
    1128:	f8 12       	cpse	r15, r24
    112a:	e3 cf       	rjmp	.-58     	; 0x10f2 <DS3231_get(ts*)+0x94>
    112c:	2f 81       	ldd	r18, Y+7	; 0x07
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:125
            century = (n & 0x80) >> 7;
        } else
            TimeDate[i] = bcdtodec(n);
    }

    if (century == 1) {
    112e:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:126
        year_full = 2000 + TimeDate[6];
    1130:	82 2f       	mov	r24, r18
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:125
            century = (n & 0x80) >> 7;
        } else
            TimeDate[i] = bcdtodec(n);
    }

    if (century == 1) {
    1132:	b9 12       	cpse	r11, r25
    1134:	04 c0       	rjmp	.+8      	; 0x113e <DS3231_get(ts*)+0xe0>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:126
        year_full = 2000 + TimeDate[6];
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	80 53       	subi	r24, 0x30	; 48
    113a:	98 4f       	sbci	r25, 0xF8	; 248
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <DS3231_get(ts*)+0xe6>
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:128
    } else {
        year_full = 1900 + TimeDate[6];
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	84 59       	subi	r24, 0x94	; 148
    1142:	98 4f       	sbci	r25, 0xF8	; 248
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:131
    }

    t->sec = TimeDate[0];
    1144:	39 81       	ldd	r19, Y+1	; 0x01
    1146:	f8 01       	movw	r30, r16
    1148:	30 83       	st	Z, r19
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:132
    t->min = TimeDate[1];
    114a:	3a 81       	ldd	r19, Y+2	; 0x02
    114c:	31 83       	std	Z+1, r19	; 0x01
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:133
    t->hour = TimeDate[2];
    114e:	3b 81       	ldd	r19, Y+3	; 0x03
    1150:	32 83       	std	Z+2, r19	; 0x02
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:134
    t->mday = TimeDate[4];
    1152:	3d 81       	ldd	r19, Y+5	; 0x05
    1154:	33 83       	std	Z+3, r19	; 0x03
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:135
    t->mon = TimeDate[5];
    1156:	3e 81       	ldd	r19, Y+6	; 0x06
    1158:	34 83       	std	Z+4, r19	; 0x04
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:136
    t->year = year_full;
    115a:	96 83       	std	Z+6, r25	; 0x06
    115c:	85 83       	std	Z+5, r24	; 0x05
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:137
    t->wday = TimeDate[3];
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	87 83       	std	Z+7, r24	; 0x07
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:138
    t->year_s = TimeDate[6];
    1162:	22 87       	std	Z+10, r18	; 0x0a
C:\Users\zak\Documents\Arduino\libraries\ds3231/ds3231.cpp:142
#ifdef CONFIG_UNIXTIME
    t->unixtime = get_unixtime(*t);
#endif
}
    1164:	27 96       	adiw	r28, 0x07	; 7
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	08 95       	ret

00001184 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:228

void HardwareSerial::end()
{
  cbi(*_ucsrb, _rxen);
  cbi(*_ucsrb, _txen);
  cbi(*_ucsrb, _rxcie);  
    1184:	fc 01       	movw	r30, r24
    1186:	24 85       	ldd	r18, Z+12	; 0x0c
    1188:	35 85       	ldd	r19, Z+13	; 0x0d
    118a:	f9 01       	movw	r30, r18
    118c:	e0 5c       	subi	r30, 0xC0	; 192
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	32 96       	adiw	r30, 0x02	; 2
    1196:	20 81       	ld	r18, Z
    1198:	31 81       	ldd	r19, Z+1	; 0x01
    119a:	82 1b       	sub	r24, r18
    119c:	93 0b       	sbc	r25, r19
    119e:	8f 73       	andi	r24, 0x3F	; 63
    11a0:	99 27       	eor	r25, r25
    11a2:	08 95       	ret

000011a4 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
    11a4:	fc 01       	movw	r30, r24
    11a6:	24 85       	ldd	r18, Z+12	; 0x0c
    11a8:	35 85       	ldd	r19, Z+13	; 0x0d
    11aa:	f9 01       	movw	r30, r18
    11ac:	ee 5b       	subi	r30, 0xBE	; 190
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	32 97       	sbiw	r30, 0x02	; 2
    11b6:	40 81       	ld	r20, Z
    11b8:	51 81       	ldd	r21, Z+1	; 0x01
    11ba:	48 17       	cp	r20, r24
    11bc:	59 07       	cpc	r21, r25
    11be:	31 f0       	breq	.+12     	; 0x11cc <HardwareSerial::peek()+0x28>
    11c0:	f9 01       	movw	r30, r18
    11c2:	e8 0f       	add	r30, r24
    11c4:	f9 1f       	adc	r31, r25
    11c6:	80 81       	ld	r24, Z
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	08 95       	ret
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	9f ef       	ldi	r25, 0xFF	; 255
    11d0:	08 95       	ret

000011d2 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
    11d2:	fc 01       	movw	r30, r24
    11d4:	84 85       	ldd	r24, Z+12	; 0x0c
    11d6:	95 85       	ldd	r25, Z+13	; 0x0d
    11d8:	fc 01       	movw	r30, r24
    11da:	ee 5b       	subi	r30, 0xBE	; 190
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	20 81       	ld	r18, Z
    11e0:	31 81       	ldd	r19, Z+1	; 0x01
    11e2:	dc 01       	movw	r26, r24
    11e4:	a0 5c       	subi	r26, 0xC0	; 192
    11e6:	bf 4f       	sbci	r27, 0xFF	; 255
    11e8:	4d 91       	ld	r20, X+
    11ea:	5c 91       	ld	r21, X
    11ec:	42 17       	cp	r20, r18
    11ee:	53 07       	cpc	r21, r19
    11f0:	61 f0       	breq	.+24     	; 0x120a <HardwareSerial::read()+0x38>
    11f2:	dc 01       	movw	r26, r24
    11f4:	a2 0f       	add	r26, r18
    11f6:	b3 1f       	adc	r27, r19
    11f8:	8c 91       	ld	r24, X
    11fa:	2f 5f       	subi	r18, 0xFF	; 255
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	2f 73       	andi	r18, 0x3F	; 63
    1200:	33 27       	eor	r19, r19
    1202:	31 83       	std	Z+1, r19	; 0x01
    1204:	20 83       	st	Z, r18
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	08 95       	ret
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	9f ef       	ldi	r25, 0xFF	; 255
    120e:	08 95       	ret

00001210 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
    1210:	fc 01       	movw	r30, r24
    1212:	84 85       	ldd	r24, Z+12	; 0x0c
    1214:	95 85       	ldd	r25, Z+13	; 0x0d
    1216:	dc 01       	movw	r26, r24
    1218:	a0 5c       	subi	r26, 0xC0	; 192
    121a:	bf 4f       	sbci	r27, 0xFF	; 255
    121c:	fc 01       	movw	r30, r24
    121e:	ee 5b       	subi	r30, 0xBE	; 190
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	8d 93       	st	X+, r24
    1228:	9c 93       	st	X, r25
    122a:	08 95       	ret

0000122c <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
    122c:	fc 01       	movw	r30, r24
    122e:	a2 89       	ldd	r26, Z+18	; 0x12
    1230:	b3 89       	ldd	r27, Z+19	; 0x13
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	05 8c       	ldd	r0, Z+29	; 0x1d
    1238:	02 c0       	rjmp	.+4      	; 0x123e <HardwareSerial::write(unsigned char)+0x12>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <HardwareSerial::write(unsigned char)+0xe>
    1242:	2c 91       	ld	r18, X
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	28 23       	and	r18, r24
    1248:	39 23       	and	r19, r25
    124a:	23 2b       	or	r18, r19
    124c:	d1 f3       	breq	.-12     	; 0x1242 <HardwareSerial::write(unsigned char)+0x16>
    124e:	06 88       	ldd	r0, Z+22	; 0x16
    1250:	f7 89       	ldd	r31, Z+23	; 0x17
    1252:	e0 2d       	mov	r30, r0
    1254:	60 83       	st	Z, r22
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	08 95       	ret

0000125c <__vector_16>:
__vector_16():
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
    1278:	40 b5       	in	r20, 0x20	; 32
store_char():
    127a:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <rx_buffer+0x40>
    127e:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <rx_buffer+0x41>
    1282:	c9 01       	movw	r24, r18
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	8f 73       	andi	r24, 0x3F	; 63
    1288:	99 27       	eor	r25, r25
    128a:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <rx_buffer+0x42>
    128e:	70 91 c5 02 	lds	r23, 0x02C5	; 0x8002c5 <rx_buffer+0x43>
    1292:	86 17       	cp	r24, r22
    1294:	97 07       	cpc	r25, r23
    1296:	41 f0       	breq	.+16     	; 0x12a8 <__vector_16+0x4c>
    1298:	f9 01       	movw	r30, r18
    129a:	ee 57       	subi	r30, 0x7E	; 126
    129c:	fd 4f       	sbci	r31, 0xFD	; 253
    129e:	40 83       	st	Z, r20
    12a0:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <rx_buffer+0x41>
    12a4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <rx_buffer+0x40>
__vector_16():
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	9f 91       	pop	r25
    12ae:	8f 91       	pop	r24
    12b0:	7f 91       	pop	r23
    12b2:	6f 91       	pop	r22
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <__vector_20>:
__vector_20():
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <__EEPROM_REGION_LENGTH__+0x7f0073>
store_char():
    12e4:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <rx_buffer1+0x40>
    12e8:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <rx_buffer1+0x41>
    12ec:	c9 01       	movw	r24, r18
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	8f 73       	andi	r24, 0x3F	; 63
    12f2:	99 27       	eor	r25, r25
    12f4:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <rx_buffer1+0x42>
    12f8:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <rx_buffer1+0x43>
    12fc:	86 17       	cp	r24, r22
    12fe:	97 07       	cpc	r25, r23
    1300:	41 f0       	breq	.+16     	; 0x1312 <__vector_20+0x4e>
    1302:	f9 01       	movw	r30, r18
    1304:	e2 5c       	subi	r30, 0xC2	; 194
    1306:	fd 4f       	sbci	r31, 0xFD	; 253
    1308:	40 83       	st	Z, r20
    130a:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <rx_buffer1+0x41>
    130e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <rx_buffer1+0x40>
__vector_20():
    1312:	ff 91       	pop	r31
    1314:	ef 91       	pop	r30
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	7f 91       	pop	r23
    131c:	6f 91       	pop	r22
    131e:	4f 91       	pop	r20
    1320:	3f 91       	pop	r19
    1322:	2f 91       	pop	r18
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0
    132a:	1f 90       	pop	r1
    132c:	18 95       	reti

0000132e <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	ec 01       	movw	r28, r24
    1342:	4a 01       	movw	r8, r20
    1344:	5b 01       	movw	r10, r22
    1346:	f2 2e       	mov	r15, r18
    1348:	ea 89       	ldd	r30, Y+18	; 0x12
    134a:	fb 89       	ldd	r31, Y+19	; 0x13
    134c:	01 e0       	ldi	r16, 0x01	; 1
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	c8 01       	movw	r24, r16
    1352:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1354:	02 c0       	rjmp	.+4      	; 0x135a <HardwareSerial::begin(unsigned long, unsigned char)+0x2c>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <HardwareSerial::begin(unsigned long, unsigned char)+0x28>
    135e:	80 83       	st	Z, r24
    1360:	60 e8       	ldi	r22, 0x80	; 128
    1362:	74 e8       	ldi	r23, 0x84	; 132
    1364:	8e e1       	ldi	r24, 0x1E	; 30
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	a5 01       	movw	r20, r10
    136a:	94 01       	movw	r18, r8
    136c:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    1370:	da 01       	movw	r26, r20
    1372:	c9 01       	movw	r24, r18
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	a1 09       	sbc	r26, r1
    1378:	b1 09       	sbc	r27, r1
    137a:	b6 95       	lsr	r27
    137c:	a7 95       	ror	r26
    137e:	97 95       	ror	r25
    1380:	87 95       	ror	r24
    1382:	ee 85       	ldd	r30, Y+14	; 0x0e
    1384:	ff 85       	ldd	r31, Y+15	; 0x0f
    1386:	29 2f       	mov	r18, r25
    1388:	33 27       	eor	r19, r19
    138a:	20 83       	st	Z, r18
    138c:	e8 89       	ldd	r30, Y+16	; 0x10
    138e:	f9 89       	ldd	r31, Y+17	; 0x11
    1390:	80 83       	st	Z, r24
    1392:	e8 8d       	ldd	r30, Y+24	; 0x18
    1394:	f9 8d       	ldd	r31, Y+25	; 0x19
    1396:	f0 82       	st	Z, r15
    1398:	ec 89       	ldd	r30, Y+20	; 0x14
    139a:	fd 89       	ldd	r31, Y+21	; 0x15
    139c:	20 81       	ld	r18, Z
    139e:	c8 01       	movw	r24, r16
    13a0:	0a 8c       	ldd	r0, Y+26	; 0x1a
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <HardwareSerial::begin(unsigned long, unsigned char)+0x7a>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <HardwareSerial::begin(unsigned long, unsigned char)+0x76>
    13ac:	82 2b       	or	r24, r18
    13ae:	80 83       	st	Z, r24
    13b0:	ec 89       	ldd	r30, Y+20	; 0x14
    13b2:	fd 89       	ldd	r31, Y+21	; 0x15
    13b4:	20 81       	ld	r18, Z
    13b6:	c8 01       	movw	r24, r16
    13b8:	0b 8c       	ldd	r0, Y+27	; 0x1b
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <HardwareSerial::begin(unsigned long, unsigned char)+0x92>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <HardwareSerial::begin(unsigned long, unsigned char)+0x8e>
    13c4:	82 2b       	or	r24, r18
    13c6:	80 83       	st	Z, r24
    13c8:	ec 89       	ldd	r30, Y+20	; 0x14
    13ca:	fd 89       	ldd	r31, Y+21	; 0x15
    13cc:	80 81       	ld	r24, Z
    13ce:	0c 8c       	ldd	r0, Y+28	; 0x1c
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <HardwareSerial::begin(unsigned long, unsigned char)+0xa8>
    13d2:	00 0f       	add	r16, r16
    13d4:	11 1f       	adc	r17, r17
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <HardwareSerial::begin(unsigned long, unsigned char)+0xa4>
    13da:	08 2b       	or	r16, r24
    13dc:	00 83       	st	Z, r16
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	bf 90       	pop	r11
    13ea:	af 90       	pop	r10
    13ec:	9f 90       	pop	r9
    13ee:	8f 90       	pop	r8
    13f0:	08 95       	ret

000013f2 <_GLOBAL__sub_I_rx_buffer>:
_GLOBAL__sub_I_rx_buffer():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:296
    #error no serial port defined  (port 0)
  #endif
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
Print():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.h:43
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    13fa:	ef e1       	ldi	r30, 0x1F	; 31
    13fc:	f2 e0       	ldi	r31, 0x02	; 2
    13fe:	13 82       	std	Z+3, r1	; 0x03
    1400:	12 82       	std	Z+2, r1	; 0x02
Stream():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1402:	88 ee       	ldi	r24, 0xE8	; 232
    1404:	c8 2e       	mov	r12, r24
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	d8 2e       	mov	r13, r24
    140a:	e1 2c       	mov	r14, r1
    140c:	f1 2c       	mov	r15, r1
    140e:	c4 82       	std	Z+4, r12	; 0x04
    1410:	d5 82       	std	Z+5, r13	; 0x05
    1412:	e6 82       	std	Z+6, r14	; 0x06
    1414:	f7 82       	std	Z+7, r15	; 0x07
HardwareSerial():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:174

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,  volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1416:	62 ec       	ldi	r22, 0xC2	; 194
    1418:	71 e0       	ldi	r23, 0x01	; 1
    141a:	71 83       	std	Z+1, r23	; 0x01
    141c:	60 83       	st	Z, r22
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:176
{
  _rx_buffer = rx_buffer;
    141e:	82 e8       	ldi	r24, 0x82	; 130
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	95 87       	std	Z+13, r25	; 0x0d
    1424:	84 87       	std	Z+12, r24	; 0x0c
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:177
  _ubrrh = ubrrh;
    1426:	82 e4       	ldi	r24, 0x42	; 66
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	97 87       	std	Z+15, r25	; 0x0f
    142c:	86 87       	std	Z+14, r24	; 0x0e
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:178
  _ubrrl = ubrrl;
    142e:	81 e4       	ldi	r24, 0x41	; 65
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	91 8b       	std	Z+17, r25	; 0x11
    1434:	80 8b       	std	Z+16, r24	; 0x10
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:179
  _ucsra = ucsra;
    1436:	86 e4       	ldi	r24, 0x46	; 70
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	93 8b       	std	Z+19, r25	; 0x13
    143c:	82 8b       	std	Z+18, r24	; 0x12
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:180
  _ucsrb = ucsrb;
    143e:	85 e4       	ldi	r24, 0x45	; 69
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	95 8b       	std	Z+21, r25	; 0x15
    1444:	84 8b       	std	Z+20, r24	; 0x14
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:181
  _ucsrc = ucsrc;
    1446:	84 e4       	ldi	r24, 0x44	; 68
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	91 8f       	std	Z+25, r25	; 0x19
    144c:	80 8f       	std	Z+24, r24	; 0x18
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:182
  _udr = udr;
    144e:	80 e4       	ldi	r24, 0x40	; 64
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	97 8b       	std	Z+23, r25	; 0x17
    1454:	86 8b       	std	Z+22, r24	; 0x16
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:183
  _rxen = rxen;
    1456:	44 e0       	ldi	r20, 0x04	; 4
    1458:	42 8f       	std	Z+26, r20	; 0x1a
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:184
  _txen = txen;
    145a:	33 e0       	ldi	r19, 0x03	; 3
    145c:	33 8f       	std	Z+27, r19	; 0x1b
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:185
  _rxcie = rxcie;
    145e:	27 e0       	ldi	r18, 0x07	; 7
    1460:	24 8f       	std	Z+28, r18	; 0x1c
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:186
  _udre = udre;
    1462:	95 e0       	ldi	r25, 0x05	; 5
    1464:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:187
  _u2x = u2x;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	86 8f       	std	Z+30, r24	; 0x1e
Print():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.h:43
    146a:	e0 e0       	ldi	r30, 0x00	; 0
    146c:	f2 e0       	ldi	r31, 0x02	; 2
    146e:	13 82       	std	Z+3, r1	; 0x03
    1470:	12 82       	std	Z+2, r1	; 0x02
Stream():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Stream.h:64
    1472:	c4 82       	std	Z+4, r12	; 0x04
    1474:	d5 82       	std	Z+5, r13	; 0x05
    1476:	e6 82       	std	Z+6, r14	; 0x06
    1478:	f7 82       	std	Z+7, r15	; 0x07
HardwareSerial():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:174

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,  volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    147a:	71 83       	std	Z+1, r23	; 0x01
    147c:	60 83       	st	Z, r22
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:176
{
  _rx_buffer = rx_buffer;
    147e:	6e e3       	ldi	r22, 0x3E	; 62
    1480:	72 e0       	ldi	r23, 0x02	; 2
    1482:	75 87       	std	Z+13, r23	; 0x0d
    1484:	64 87       	std	Z+12, r22	; 0x0c
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:177
  _ubrrh = ubrrh;
    1486:	65 e7       	ldi	r22, 0x75	; 117
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	77 87       	std	Z+15, r23	; 0x0f
    148c:	66 87       	std	Z+14, r22	; 0x0e
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:178
  _ubrrl = ubrrl;
    148e:	64 e7       	ldi	r22, 0x74	; 116
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	71 8b       	std	Z+17, r23	; 0x11
    1494:	60 8b       	std	Z+16, r22	; 0x10
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:179
  _ucsra = ucsra;
    1496:	69 e7       	ldi	r22, 0x79	; 121
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	73 8b       	std	Z+19, r23	; 0x13
    149c:	62 8b       	std	Z+18, r22	; 0x12
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:180
  _ucsrb = ucsrb;
    149e:	68 e7       	ldi	r22, 0x78	; 120
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	75 8b       	std	Z+21, r23	; 0x15
    14a4:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:181
  _ucsrc = ucsrc;
    14a6:	67 e7       	ldi	r22, 0x77	; 119
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	71 8f       	std	Z+25, r23	; 0x19
    14ac:	60 8f       	std	Z+24, r22	; 0x18
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:182
  _udr = udr;
    14ae:	63 e7       	ldi	r22, 0x73	; 115
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	77 8b       	std	Z+23, r23	; 0x17
    14b4:	66 8b       	std	Z+22, r22	; 0x16
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:183
  _rxen = rxen;
    14b6:	42 8f       	std	Z+26, r20	; 0x1a
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:184
  _txen = txen;
    14b8:	33 8f       	std	Z+27, r19	; 0x1b
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:185
  _rxcie = rxcie;
    14ba:	24 8f       	std	Z+28, r18	; 0x1c
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:186
  _udre = udre;
    14bc:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:187
  _u2x = u2x;
    14be:	86 8f       	std	Z+30, r24	; 0x1e
_GLOBAL__sub_I_rx_buffer():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/HardwareSerial.cpp:296
    #error no serial port defined  (port 0)
  #endif
#endif

#if defined(UBRR1H)
  HardwareSerial Serial1(&rx_buffer1, &UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1, RXEN1, TXEN1, RXCIE1, UDRE1, U2X1);
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	08 95       	ret

000014ca <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:184
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	6c 01       	movw	r12, r24
    14dc:	eb 01       	movw	r28, r22
    14de:	7b 01       	movw	r14, r22
    14e0:	e4 0e       	add	r14, r20
    14e2:	f5 1e       	adc	r15, r21
    14e4:	00 e0       	ldi	r16, 0x00	; 0
    14e6:	10 e0       	ldi	r17, 0x00	; 0
    14e8:	ce 15       	cp	r28, r14
    14ea:	df 05       	cpc	r29, r15
    14ec:	61 f0       	breq	.+24     	; 0x1506 <Print::write(unsigned char const*, unsigned int)+0x3c>
    14ee:	69 91       	ld	r22, Y+
    14f0:	d6 01       	movw	r26, r12
    14f2:	ed 91       	ld	r30, X+
    14f4:	fc 91       	ld	r31, X
    14f6:	01 90       	ld	r0, Z+
    14f8:	f0 81       	ld	r31, Z
    14fa:	e0 2d       	mov	r30, r0
    14fc:	c6 01       	movw	r24, r12
    14fe:	09 95       	icall
    1500:	08 0f       	add	r16, r24
    1502:	19 1f       	adc	r17, r25
    1504:	f1 cf       	rjmp	.-30     	; 0x14e8 <Print::write(unsigned char const*, unsigned int)+0x1e>
    1506:	c8 01       	movw	r24, r16
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	ff 90       	pop	r15
    1512:	ef 90       	pop	r14
    1514:	df 90       	pop	r13
    1516:	cf 90       	pop	r12
    1518:	08 95       	ret

0000151a <Print::write(char const*)>:
_ZN5Print5writeEPKc():
    151a:	61 15       	cp	r22, r1
    151c:	71 05       	cpc	r23, r1
    151e:	79 f0       	breq	.+30     	; 0x153e <Print::write(char const*)+0x24>
    1520:	fb 01       	movw	r30, r22
    1522:	01 90       	ld	r0, Z+
    1524:	00 20       	and	r0, r0
    1526:	e9 f7       	brne	.-6      	; 0x1522 <Print::write(char const*)+0x8>
    1528:	31 97       	sbiw	r30, 0x01	; 1
    152a:	af 01       	movw	r20, r30
    152c:	46 1b       	sub	r20, r22
    152e:	57 0b       	sbc	r21, r23
    1530:	dc 01       	movw	r26, r24
    1532:	ed 91       	ld	r30, X+
    1534:	fc 91       	ld	r31, X
    1536:	02 80       	ldd	r0, Z+2	; 0x02
    1538:	f3 81       	ldd	r31, Z+3	; 0x03
    153a:	e0 2d       	mov	r30, r0
    153c:	09 94       	ijmp
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	08 95       	ret

00001544 <Print::print(char const*)>:
_ZN5Print5printEPKc():
    1544:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <Print::write(char const*)>

00001548 <Print::print(char)>:
_ZN5Print5printEc():
    1548:	dc 01       	movw	r26, r24
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	01 90       	ld	r0, Z+
    1550:	f0 81       	ld	r31, Z
    1552:	e0 2d       	mov	r30, r0
    1554:	09 94       	ijmp

00001556 <Print::println()>:
_ZN5Print7printlnEv():
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ec 01       	movw	r28, r24
    1560:	6d e0       	ldi	r22, 0x0D	; 13
    1562:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Print::print(char)>
    1566:	8c 01       	movw	r16, r24
    1568:	6a e0       	ldi	r22, 0x0A	; 10
    156a:	ce 01       	movw	r24, r28
    156c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Print::print(char)>
    1570:	80 0f       	add	r24, r16
    1572:	91 1f       	adc	r25, r17
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	ec 01       	movw	r28, r24
_ZN5Print5printEPKc():
    1588:	0e 94 8d 0a 	call	0x151a	; 0x151a <Print::write(char const*)>
    158c:	8c 01       	movw	r16, r24
_ZN5Print7printlnEPKc():
    158e:	ce 01       	movw	r24, r28
    1590:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Print::println()>
    1594:	80 0f       	add	r24, r16
    1596:	91 1f       	adc	r25, r17
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    15a2:	8f 92       	push	r8
    15a4:	9f 92       	push	r9
    15a6:	af 92       	push	r10
    15a8:	bf 92       	push	r11
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	a1 97       	sbiw	r28, 0x21	; 33
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	6c 01       	movw	r12, r24
    15cc:	14 2f       	mov	r17, r20
    15ce:	e5 2f       	mov	r30, r21
    15d0:	cb 01       	movw	r24, r22
    15d2:	02 2f       	mov	r16, r18
    15d4:	19 a2       	std	Y+33, r1	; 0x21
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	08 f4       	brcc	.+2      	; 0x15dc <Print::printNumber(unsigned long, unsigned char)+0x3a>
    15da:	0a e0       	ldi	r16, 0x0A	; 10
    15dc:	7e 01       	movw	r14, r28
    15de:	21 e2       	ldi	r18, 0x21	; 33
    15e0:	e2 0e       	add	r14, r18
    15e2:	f1 1c       	adc	r15, r1
    15e4:	80 2e       	mov	r8, r16
    15e6:	91 2c       	mov	r9, r1
    15e8:	a1 2c       	mov	r10, r1
    15ea:	b1 2c       	mov	r11, r1
    15ec:	61 2f       	mov	r22, r17
    15ee:	7e 2f       	mov	r23, r30
    15f0:	a5 01       	movw	r20, r10
    15f2:	94 01       	movw	r18, r8
    15f4:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    15f8:	80 2f       	mov	r24, r16
    15fa:	62 2f       	mov	r22, r18
    15fc:	0e 94 91 10 	call	0x2122	; 0x2122 <__mulqi3>
    1600:	18 1b       	sub	r17, r24
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	e8 1a       	sub	r14, r24
    1606:	f1 08       	sbc	r15, r1
    1608:	1a 30       	cpi	r17, 0x0A	; 10
    160a:	14 f4       	brge	.+4      	; 0x1610 <Print::printNumber(unsigned long, unsigned char)+0x6e>
    160c:	10 5d       	subi	r17, 0xD0	; 208
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <Print::printNumber(unsigned long, unsigned char)+0x70>
    1610:	19 5c       	subi	r17, 0xC9	; 201
    1612:	f7 01       	movw	r30, r14
    1614:	10 83       	st	Z, r17
    1616:	12 2f       	mov	r17, r18
    1618:	e3 2f       	mov	r30, r19
    161a:	ca 01       	movw	r24, r20
    161c:	23 2b       	or	r18, r19
    161e:	24 2b       	or	r18, r20
    1620:	25 2b       	or	r18, r21
    1622:	21 f7       	brne	.-56     	; 0x15ec <Print::printNumber(unsigned long, unsigned char)+0x4a>
    1624:	b7 01       	movw	r22, r14
    1626:	c6 01       	movw	r24, r12
    1628:	0e 94 8d 0a 	call	0x151a	; 0x151a <Print::write(char const*)>
    162c:	a1 96       	adiw	r28, 0x21	; 33
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	08 95       	ret

00001652 <Print::print(long, int)>:
_ZN5Print5printEli():
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	6a 01       	movw	r12, r20
    1666:	7b 01       	movw	r14, r22
    1668:	21 15       	cp	r18, r1
    166a:	31 05       	cpc	r19, r1
    166c:	79 f4       	brne	.+30     	; 0x168c <Print::print(long, int)+0x3a>
    166e:	e8 81       	ld	r30, Y
    1670:	f9 81       	ldd	r31, Y+1	; 0x01
    1672:	01 90       	ld	r0, Z+
    1674:	f0 81       	ld	r31, Z
    1676:	e0 2d       	mov	r30, r0
    1678:	64 2f       	mov	r22, r20
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	09 94       	ijmp
    168c:	2a 30       	cpi	r18, 0x0A	; 10
    168e:	31 05       	cpc	r19, r1
    1690:	e9 f4       	brne	.+58     	; 0x16cc <Print::print(long, int)+0x7a>
    1692:	77 ff       	sbrs	r23, 7
    1694:	1a c0       	rjmp	.+52     	; 0x16ca <Print::print(long, int)+0x78>
    1696:	6d e2       	ldi	r22, 0x2D	; 45
    1698:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Print::print(char)>
    169c:	8c 01       	movw	r16, r24
    169e:	44 27       	eor	r20, r20
    16a0:	55 27       	eor	r21, r21
    16a2:	ba 01       	movw	r22, r20
    16a4:	4c 19       	sub	r20, r12
    16a6:	5d 09       	sbc	r21, r13
    16a8:	6e 09       	sbc	r22, r14
    16aa:	7f 09       	sbc	r23, r15
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	ce 01       	movw	r24, r28
    16b0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Print::printNumber(unsigned long, unsigned char)>
    16b4:	80 0f       	add	r24, r16
    16b6:	91 1f       	adc	r25, r17
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	df 90       	pop	r13
    16c6:	cf 90       	pop	r12
    16c8:	08 95       	ret
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	b7 01       	movw	r22, r14
    16ce:	a6 01       	movw	r20, r12
    16d0:	ce 01       	movw	r24, r28
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <Print::printNumber(unsigned long, unsigned char)>

000016e6 <Print::print(int, int)>:
_ZN5Print5printEii():
    16e6:	9a 01       	movw	r18, r20
    16e8:	ab 01       	movw	r20, r22
    16ea:	77 0f       	add	r23, r23
    16ec:	66 0b       	sbc	r22, r22
    16ee:	77 0b       	sbc	r23, r23
    16f0:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <Print::print(long, int)>

000016f4 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
    16fe:	9a 01       	movw	r18, r20
_ZN5Print5printEii():
    1700:	ab 01       	movw	r20, r22
    1702:	77 0f       	add	r23, r23
    1704:	66 0b       	sbc	r22, r22
    1706:	77 0b       	sbc	r23, r23
    1708:	0e 94 29 0b 	call	0x1652	; 0x1652 <Print::print(long, int)>
    170c:	8c 01       	movw	r16, r24
_ZN5Print7printlnEii():
    170e:	ce 01       	movw	r24, r28
    1710:	0e 94 ab 0a 	call	0x1556	; 0x1556 <Print::println()>
    1714:	80 0f       	add	r24, r16
    1716:	91 1f       	adc	r25, r17
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	08 95       	ret

00001722 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:222

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1722:	4f 92       	push	r4
    1724:	5f 92       	push	r5
    1726:	6f 92       	push	r6
    1728:	7f 92       	push	r7
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	ec 01       	movw	r28, r24
    1740:	6a 01       	movw	r12, r20
    1742:	7b 01       	movw	r14, r22
    1744:	b2 2e       	mov	r11, r18
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:225
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1746:	9a 01       	movw	r18, r20
    1748:	ab 01       	movw	r20, r22
    174a:	c7 01       	movw	r24, r14
    174c:	b6 01       	movw	r22, r12
    174e:	0e 94 8c 10 	call	0x2118	; 0x2118 <__unordsf2>
    1752:	88 23       	and	r24, r24
    1754:	19 f0       	breq	.+6      	; 0x175c <Print::printFloat(double, unsigned char)+0x3a>
_ZN5Print5printEPKc():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:61
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1756:	6e ec       	ldi	r22, 0xCE	; 206
    1758:	71 e0       	ldi	r23, 0x01	; 1
    175a:	27 c0       	rjmp	.+78     	; 0x17aa <Print::printFloat(double, unsigned char)+0x88>
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:226
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    175c:	26 01       	movw	r4, r12
    175e:	37 01       	movw	r6, r14
    1760:	e8 94       	clt
    1762:	77 f8       	bld	r7, 7
    1764:	2f ef       	ldi	r18, 0xFF	; 255
    1766:	3f ef       	ldi	r19, 0xFF	; 255
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	5f e7       	ldi	r21, 0x7F	; 127
    176c:	c3 01       	movw	r24, r6
    176e:	b2 01       	movw	r22, r4
    1770:	0e 94 8c 10 	call	0x2118	; 0x2118 <__unordsf2>
    1774:	81 11       	cpse	r24, r1
    1776:	0d c0       	rjmp	.+26     	; 0x1792 <Print::printFloat(double, unsigned char)+0x70>
    1778:	2f ef       	ldi	r18, 0xFF	; 255
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	5f e7       	ldi	r21, 0x7F	; 127
    1780:	c3 01       	movw	r24, r6
    1782:	b2 01       	movw	r22, r4
    1784:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__cmpsf2>
    1788:	18 16       	cp	r1, r24
    178a:	1c f4       	brge	.+6      	; 0x1792 <Print::printFloat(double, unsigned char)+0x70>
_ZN5Print5printEPKc():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:61
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    178c:	62 ed       	ldi	r22, 0xD2	; 210
    178e:	71 e0       	ldi	r23, 0x01	; 1
    1790:	0c c0       	rjmp	.+24     	; 0x17aa <Print::printFloat(double, unsigned char)+0x88>
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:227
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1792:	2f ef       	ldi	r18, 0xFF	; 255
    1794:	3f ef       	ldi	r19, 0xFF	; 255
    1796:	4f e7       	ldi	r20, 0x7F	; 127
    1798:	5f e4       	ldi	r21, 0x4F	; 79
    179a:	c7 01       	movw	r24, r14
    179c:	b6 01       	movw	r22, r12
    179e:	0e 94 12 10 	call	0x2024	; 0x2024 <__gesf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	9c f4       	brge	.+38     	; 0x17cc <Print::printFloat(double, unsigned char)+0xaa>
_ZN5Print5printEPKc():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:61
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    17a6:	66 ed       	ldi	r22, 0xD6	; 214
    17a8:	71 e0       	ldi	r23, 0x01	; 1
    17aa:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:264
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	7f 90       	pop	r7
    17c2:	6f 90       	pop	r6
    17c4:	5f 90       	pop	r5
    17c6:	4f 90       	pop	r4
_ZN5Print5printEPKc():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:61
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    17c8:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <Print::write(char const*)>
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:228
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    17cc:	2f ef       	ldi	r18, 0xFF	; 255
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	5f ec       	ldi	r21, 0xCF	; 207
    17d4:	c7 01       	movw	r24, r14
    17d6:	b6 01       	movw	r22, r12
    17d8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__cmpsf2>
    17dc:	87 fd       	sbrc	r24, 7
    17de:	e3 cf       	rjmp	.-58     	; 0x17a6 <Print::printFloat(double, unsigned char)+0x84>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:231
  
  // Handle negative numbers
  if (number < 0.0)
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	a9 01       	movw	r20, r18
    17e6:	c7 01       	movw	r24, r14
    17e8:	b6 01       	movw	r22, r12
    17ea:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__cmpsf2>
    17ee:	87 ff       	sbrs	r24, 7
    17f0:	0a c0       	rjmp	.+20     	; 0x1806 <Print::printFloat(double, unsigned char)+0xe4>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:233
  {
     n += print('-');
    17f2:	6d e2       	ldi	r22, 0x2D	; 45
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <Print::print(char)>
    17fa:	4c 01       	movw	r8, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:234
     number = -number;
    17fc:	f7 fa       	bst	r15, 7
    17fe:	f0 94       	com	r15
    1800:	f7 f8       	bld	r15, 7
    1802:	f0 94       	com	r15
    1804:	02 c0       	rjmp	.+4      	; 0x180a <Print::printFloat(double, unsigned char)+0xe8>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:223
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1806:	81 2c       	mov	r8, r1
    1808:	91 2c       	mov	r9, r1
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:239
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    180a:	a1 2c       	mov	r10, r1
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:238
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:239
  for (uint8_t i=0; i<digits; ++i)
    1814:	ab 14       	cp	r10, r11
    1816:	41 f0       	breq	.+16     	; 0x1828 <Print::printFloat(double, unsigned char)+0x106>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:240
    rounding /= 10.0;
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__divsf3>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:239
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1824:	a3 94       	inc	r10
    1826:	f6 cf       	rjmp	.-20     	; 0x1814 <Print::printFloat(double, unsigned char)+0xf2>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:242
    rounding /= 10.0;
  
  number += rounding;
    1828:	9b 01       	movw	r18, r22
    182a:	ac 01       	movw	r20, r24
    182c:	c7 01       	movw	r24, r14
    182e:	b6 01       	movw	r22, r12
    1830:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__addsf3>
    1834:	2b 01       	movw	r4, r22
    1836:	3c 01       	movw	r6, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:245

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1838:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixunssfsi>
    183c:	6b 01       	movw	r12, r22
    183e:	7c 01       	movw	r14, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:246
  double remainder = number - (double)int_part;
    1840:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	c3 01       	movw	r24, r6
    184a:	b2 01       	movw	r22, r4
    184c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__subsf3>
    1850:	2b 01       	movw	r4, r22
    1852:	3c 01       	movw	r6, r24
_ZN5Print5printEmi():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1854:	2a e0       	ldi	r18, 0x0A	; 10
    1856:	b7 01       	movw	r22, r14
    1858:	a6 01       	movw	r20, r12
    185a:	ce 01       	movw	r24, r28
    185c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:247
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1860:	7c 01       	movw	r14, r24
    1862:	e8 0c       	add	r14, r8
    1864:	f9 1c       	adc	r15, r9
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:250

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1866:	bb 20       	and	r11, r11
    1868:	39 f0       	breq	.+14     	; 0x1878 <Print::printFloat(double, unsigned char)+0x156>
_ZN5Print5printEPKc():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:61
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    186a:	63 eb       	ldi	r22, 0xB3	; 179
    186c:	71 e0       	ldi	r23, 0x01	; 1
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 8d 0a 	call	0x151a	; 0x151a <Print::write(char const*)>
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:251
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1874:	e8 0e       	add	r14, r24
    1876:	f9 1e       	adc	r15, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:238
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1878:	db 2c       	mov	r13, r11
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:255
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    187a:	dd 20       	and	r13, r13
    187c:	39 f1       	breq	.+78     	; 0x18cc <Print::printFloat(double, unsigned char)+0x1aa>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:257
  {
    remainder *= 10.0;
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	c3 01       	movw	r24, r6
    1888:	b2 01       	movw	r22, r4
    188a:	0e 94 17 10 	call	0x202e	; 0x202e <__mulsf3>
    188e:	2b 01       	movw	r4, r22
    1890:	3c 01       	movw	r6, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:258
    int toPrint = int(remainder);
    1892:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__fixsfsi>
_ZN5Print5printEii():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:76
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1896:	4b 01       	movw	r8, r22
    1898:	77 0f       	add	r23, r23
    189a:	aa 08       	sbc	r10, r10
    189c:	bb 08       	sbc	r11, r11
    189e:	2a e0       	ldi	r18, 0x0A	; 10
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	b5 01       	movw	r22, r10
    18a4:	a4 01       	movw	r20, r8
    18a6:	ce 01       	movw	r24, r28
    18a8:	0e 94 29 0b 	call	0x1652	; 0x1652 <Print::print(long, int)>
_ZN5Print10printFloatEdh():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:259
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    18ac:	e8 0e       	add	r14, r24
    18ae:	f9 1e       	adc	r15, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:260
    remainder -= toPrint; 
    18b0:	c5 01       	movw	r24, r10
    18b2:	b4 01       	movw	r22, r8
    18b4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatsisf>
    18b8:	9b 01       	movw	r18, r22
    18ba:	ac 01       	movw	r20, r24
    18bc:	c3 01       	movw	r24, r6
    18be:	b2 01       	movw	r22, r4
    18c0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__subsf3>
    18c4:	2b 01       	movw	r4, r22
    18c6:	3c 01       	movw	r6, r24
    18c8:	da 94       	dec	r13
    18ca:	d7 cf       	rjmp	.-82     	; 0x187a <Print::printFloat(double, unsigned char)+0x158>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:264
  } 
  
  return n;
}
    18cc:	c7 01       	movw	r24, r14
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	7f 90       	pop	r7
    18e4:	6f 90       	pop	r6
    18e6:	5f 90       	pop	r5
    18e8:	4f 90       	pop	r4
    18ea:	08 95       	ret

000018ec <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/Print.cpp:108
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    18ec:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <Print::printFloat(double, unsigned char)>

000018f0 <main>:
main():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/main.cpp:5
#include <WProgram.h>

int main(void)
{
	init();
    18f0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <init>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/main.cpp:7

	setup();
    18f4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <setup>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/main.cpp:10 (discriminator 1)
    
	for (;;)
		loop();
    18f8:	0e 94 86 02 	call	0x50c	; 0x50c <loop>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/main.cpp:3 (discriminator 1)
#include <WProgram.h>

int main(void)
    18fc:	fd cf       	rjmp	.-6      	; 0x18f8 <main+0x8>

000018fe <initToneTimerInternal>:
Timer1_ClockSelect():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring.c:448
  // Ensure the timer is in the same state as power-up
  ToneTimer_SetToPowerup();

  #if defined( INITIALIZE_SECONDARY_TIMERS ) && INITIALIZE_SECONDARY_TIMERS
    // Prepare the timer for PWM
    initToneTimerInternal();
    18fe:	e1 e7       	ldi	r30, 0x71	; 113
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 7f       	andi	r24, 0xF8	; 248
    1906:	80 83       	st	Z, r24
Timer1_SetWaveformGenerationMode():
    1908:	a2 e7       	ldi	r26, 0x72	; 114
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	8c 91       	ld	r24, X
    190e:	8c 7f       	andi	r24, 0xFC	; 252
    1910:	81 60       	ori	r24, 0x01	; 1
    1912:	8c 93       	st	X, r24
    1914:	80 81       	ld	r24, Z
    1916:	87 7e       	andi	r24, 0xE7	; 231
    1918:	80 83       	st	Z, r24
Timer1_ClockSelect():
    191a:	80 81       	ld	r24, Z
    191c:	88 7f       	andi	r24, 0xF8	; 248
    191e:	83 60       	ori	r24, 0x03	; 3
    1920:	80 83       	st	Z, r24
    1922:	08 95       	ret

00001924 <__vector_12>:
__vector_12():
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <millis_timer_millis>
    193e:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <millis_timer_millis+0x1>
    1942:	a0 91 c9 02 	lds	r26, 0x02C9	; 0x8002c9 <millis_timer_millis+0x2>
    1946:	b0 91 ca 02 	lds	r27, 0x02CA	; 0x8002ca <millis_timer_millis+0x3>
    194a:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <millis_timer_fract>
    194e:	26 e0       	ldi	r18, 0x06	; 6
    1950:	23 0f       	add	r18, r19
    1952:	2d 37       	cpi	r18, 0x7D	; 125
    1954:	30 f0       	brcs	.+12     	; 0x1962 <__vector_12+0x3e>
    1956:	29 e8       	ldi	r18, 0x89	; 137
    1958:	23 0f       	add	r18, r19
    195a:	03 96       	adiw	r24, 0x03	; 3
    195c:	a1 1d       	adc	r26, r1
    195e:	b1 1d       	adc	r27, r1
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <__vector_12+0x44>
    1962:	02 96       	adiw	r24, 0x02	; 2
    1964:	a1 1d       	adc	r26, r1
    1966:	b1 1d       	adc	r27, r1
    1968:	20 93 c6 02 	sts	0x02C6, r18	; 0x8002c6 <millis_timer_fract>
    196c:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <millis_timer_millis>
    1970:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <millis_timer_millis+0x1>
    1974:	a0 93 c9 02 	sts	0x02C9, r26	; 0x8002c9 <millis_timer_millis+0x2>
    1978:	b0 93 ca 02 	sts	0x02CA, r27	; 0x8002ca <millis_timer_millis+0x3>
    197c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <millis_timer_overflow_count>
    1980:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <millis_timer_overflow_count+0x1>
    1984:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <millis_timer_overflow_count+0x2>
    1988:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <millis_timer_overflow_count+0x3>
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	a1 1d       	adc	r26, r1
    1990:	b1 1d       	adc	r27, r1
    1992:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <millis_timer_overflow_count>
    1996:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <millis_timer_overflow_count+0x1>
    199a:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <millis_timer_overflow_count+0x2>
    199e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <millis_timer_overflow_count+0x3>
    19a2:	bf 91       	pop	r27
    19a4:	af 91       	pop	r26
    19a6:	9f 91       	pop	r25
    19a8:	8f 91       	pop	r24
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <millis>:
millis():
    19b8:	2f b7       	in	r18, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <millis_timer_millis>
    19c0:	70 91 c8 02 	lds	r23, 0x02C8	; 0x8002c8 <millis_timer_millis+0x1>
    19c4:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <millis_timer_millis+0x2>
    19c8:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <millis_timer_millis+0x3>
    19cc:	2f bf       	out	0x3f, r18	; 63
    19ce:	08 95       	ret

000019d0 <micros>:
micros():
    19d0:	3f b7       	in	r19, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <millis_timer_overflow_count>
    19d8:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <millis_timer_overflow_count+0x1>
    19dc:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <millis_timer_overflow_count+0x2>
    19e0:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <millis_timer_overflow_count+0x3>
Timer0_GetCount():
    19e4:	29 b3       	in	r18, 0x19	; 25
micros():
    19e6:	09 b6       	in	r0, 0x39	; 57
    19e8:	01 fe       	sbrs	r0, 1
    19ea:	05 c0       	rjmp	.+10     	; 0x19f6 <micros+0x26>
    19ec:	2f 3f       	cpi	r18, 0xFF	; 255
    19ee:	19 f0       	breq	.+6      	; 0x19f6 <micros+0x26>
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	a1 1d       	adc	r26, r1
    19f4:	b1 1d       	adc	r27, r1
    19f6:	3f bf       	out	0x3f, r19	; 63
    19f8:	ba 2f       	mov	r27, r26
    19fa:	a9 2f       	mov	r26, r25
    19fc:	98 2f       	mov	r25, r24
    19fe:	88 27       	eor	r24, r24
    1a00:	82 0f       	add	r24, r18
    1a02:	91 1d       	adc	r25, r1
    1a04:	a1 1d       	adc	r26, r1
    1a06:	b1 1d       	adc	r27, r1
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	43 e0       	ldi	r20, 0x03	; 3
    1a0e:	66 0f       	add	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	88 1f       	adc	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	4a 95       	dec	r20
    1a18:	d1 f7       	brne	.-12     	; 0x1a0e <micros+0x3e>
    1a1a:	08 95       	ret

00001a1c <yield>:
__empty():
    1a1c:	08 95       	ret

00001a1e <delay>:
delay():
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	6b 01       	movw	r12, r22
    1a2c:	7c 01       	movw	r14, r24
    1a2e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <micros>
    1a32:	eb 01       	movw	r28, r22
    1a34:	c1 14       	cp	r12, r1
    1a36:	d1 04       	cpc	r13, r1
    1a38:	e1 04       	cpc	r14, r1
    1a3a:	f1 04       	cpc	r15, r1
    1a3c:	89 f0       	breq	.+34     	; 0x1a60 <delay+0x42>
    1a3e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <yield>
    1a42:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <micros>
    1a46:	6c 1b       	sub	r22, r28
    1a48:	7d 0b       	sbc	r23, r29
    1a4a:	68 3e       	cpi	r22, 0xE8	; 232
    1a4c:	73 40       	sbci	r23, 0x03	; 3
    1a4e:	90 f3       	brcs	.-28     	; 0x1a34 <delay+0x16>
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	c8 1a       	sub	r12, r24
    1a54:	d1 08       	sbc	r13, r1
    1a56:	e1 08       	sbc	r14, r1
    1a58:	f1 08       	sbc	r15, r1
    1a5a:	c8 51       	subi	r28, 0x18	; 24
    1a5c:	dc 4f       	sbci	r29, 0xFC	; 252
    1a5e:	f1 cf       	rjmp	.-30     	; 0x1a42 <delay+0x24>
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	08 95       	ret

00001a6e <init>:
init():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring.c:455
}

void init(void)
{
  // this needs to be called before setup() or some functions won't work there
  sei();
    1a6e:	78 94       	sei
Timer0_SetWaveformGenerationMode():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:677
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
    1a70:	8b b3       	in	r24, 0x1b	; 27
    1a72:	83 60       	ori	r24, 0x03	; 3
    1a74:	8b bb       	out	0x1b, r24	; 27
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:678
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
    1a76:	d3 98       	cbi	0x1a, 3	; 26
Timer0_ClockSelect():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:659
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
    1a78:	8a b3       	in	r24, 0x1a	; 26
    1a7a:	88 7f       	andi	r24, 0xF8	; 248
    1a7c:	83 60       	ori	r24, 0x03	; 3
    1a7e:	8a bb       	out	0x1a, r24	; 26
Timer0_EnableOverflowInterrupt():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:733
  TIMSK |= (1<<OCIE0A);
}

__attribute__((always_inline)) static inline void Timer0_EnableOverflowInterrupt( void )
{
  TIMSK |= (1<<TOIE0);
    1a80:	8a b7       	in	r24, 0x3a	; 58
    1a82:	82 60       	ori	r24, 0x02	; 2
    1a84:	8a bf       	out	0x3a, r24	; 58
init():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring.c:473
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  MillisTimer_EnableOverflowInterrupt();

  // Initialize the timer used for Tone
  #if defined( INITIALIZE_SECONDARY_TIMERS ) && INITIALIZE_SECONDARY_TIMERS
    initToneTimerInternal();
    1a86:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <initToneTimerInternal>
ADC_PrescalerSelect():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_adc.h:89
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
    1a8a:	83 b1       	in	r24, 0x03	; 3
    1a8c:	88 7f       	andi	r24, 0xF8	; 248
    1a8e:	86 60       	ori	r24, 0x06	; 6
    1a90:	83 b9       	out	0x03, r24	; 3
ADC_Enable():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_adc.h:94
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
    1a92:	1f 9a       	sbi	0x03, 7	; 3
    1a94:	08 95       	ret

00001a96 <analogRead>:
analogRead():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_analog.c:53
{
  //#if defined( CORE_ANALOG_FIRST )
  //  if ( pin >= CORE_ANALOG_FIRST ) pin -= CORE_ANALOG_FIRST; // allow for channel or pin numbers
  //#endif
  #ifndef __AVR_ATtiny828__
  if (pin & 64) {pin=pin&63;}
    1a96:	86 fd       	sbrc	r24, 6
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_analog.c:53 (discriminator 1)
    1a98:	8f 73       	andi	r24, 0x3F	; 63
ADC_SetVoltageReference():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_adc.h:256
}
adc_ic_t;

__attribute__((always_inline)) static inline void ADC_SetVoltageReference( adc_vr_t vr )
{
  ADMUX = (ADMUX & ~MASK2(REFS1,REFS0)) | (((vr & B11) >> 0) << REFS0);
    1a9a:	94 b1       	in	r25, 0x04	; 4
    1a9c:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <analog_reference>
    1aa0:	22 95       	swap	r18
    1aa2:	22 0f       	add	r18, r18
    1aa4:	22 0f       	add	r18, r18
    1aa6:	20 7c       	andi	r18, 0xC0	; 192
    1aa8:	9f 73       	andi	r25, 0x3F	; 63
    1aaa:	92 2b       	or	r25, r18
    1aac:	94 b9       	out	0x04, r25	; 4
ADC_SetInputChannel():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_adc.h:261
}

__attribute__((always_inline)) static inline void ADC_SetInputChannel( adc_ic_t ic )
{
  ADMUX = (ADMUX & ~MASK4(MUX3,MUX2,MUX1,MUX0)) | (ic << MUX0);
    1aae:	94 b1       	in	r25, 0x04	; 4
    1ab0:	90 7f       	andi	r25, 0xF0	; 240
    1ab2:	89 2b       	or	r24, r25
    1ab4:	84 b9       	out	0x04, r24	; 4
ADC_StartConversion():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_adc.h:266
}

__attribute__((always_inline)) static inline void ADC_StartConversion( void )
{
  ADCSRA |= MASK1( ADSC );
    1ab6:	1e 9a       	sbi	0x03, 6	; 3
analogRead():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_analog.c:61 (discriminator 1)
  ADC_SetVoltageReference( analog_reference );
  ADC_SetInputChannel( pin );

  ADC_StartConversion();

  while( ADC_ConversionInProgress() );
    1ab8:	1e 99       	sbic	0x03, 6	; 3
    1aba:	fe cf       	rjmp	.-4      	; 0x1ab8 <analogRead+0x22>
ADC_GetDataRegister():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_adc.h:276
  return( (ADCSRA & (1<<ADSC)) != 0 );
}

__attribute__((always_inline)) static inline uint16_t ADC_GetDataRegister( void )
{
  return( ADC );
    1abc:	80 b1       	in	r24, 0x00	; 0
    1abe:	91 b1       	in	r25, 0x01	; 1
analogRead():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_analog.c:64

  return( ADC_GetDataRegister() );
}
    1ac0:	08 95       	ret

00001ac2 <pinMode>:
pinMode():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:37
#include "core_timers.h"
#include "PwmTimer.h"

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)
void pinMode(uint8_t pin, uint8_t mode)
{
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:39
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin & 63));}
    1ac6:	86 ff       	sbrs	r24, 6
    1ac8:	08 c0       	rjmp	.+16     	; 0x1ada <pinMode+0x18>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:39 (discriminator 1)
    1aca:	a8 2f       	mov	r26, r24
    1acc:	af 73       	andi	r26, 0x3F	; 63
    1ace:	a6 30       	cpi	r26, 0x06	; 6
    1ad0:	10 f4       	brcc	.+4      	; 0x1ad6 <pinMode+0x14>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:39 (discriminator 2)
    1ad2:	85 e0       	ldi	r24, 0x05	; 5
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <pinMode+0x16>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:39 (discriminator 3)
    1ad6:	86 e1       	ldi	r24, 0x16	; 22
    1ad8:	8a 1b       	sub	r24, r26
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:41
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
    1ada:	a8 2f       	mov	r26, r24
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	fd 01       	movw	r30, r26
    1ae0:	e0 59       	subi	r30, 0x90	; 144
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	94 91       	lpm	r25, Z
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:42
  uint8_t port = digitalPinToPort(pin);
    1ae6:	fd 01       	movw	r30, r26
    1ae8:	ee 57       	subi	r30, 0x7E	; 126
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	a4 91       	lpm	r26, Z
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:45
  volatile uint8_t *reg, *out, *pue;

  if (port == NOT_A_PIN) return;
    1aee:	aa 23       	and	r26, r26
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <pinMode+0x32>
    1af2:	3c c0       	rjmp	.+120    	; 0x1b6c <pinMode+0xaa>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:48

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	fd 01       	movw	r30, r26
    1af8:	e0 56       	subi	r30, 0x60	; 96
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	e4 91       	lpm	r30, Z
    1afe:	ce 2f       	mov	r28, r30
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:49
  out = portOutputRegister(port);
    1b02:	fd 01       	movw	r30, r26
    1b04:	e4 56       	subi	r30, 0x64	; 100
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	e4 91       	lpm	r30, Z
    1b0a:	2e 2f       	mov	r18, r30
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:50
  pue = portPullupRegister(port);
    1b0e:	fd 01       	movw	r30, r26
    1b10:	e8 56       	subi	r30, 0x68	; 104
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	a4 91       	lpm	r26, Z
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	89 2f       	mov	r24, r25
    1b1a:	80 95       	com	r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:52

  if (mode == INPUT) { 
    1b1c:	61 11       	cpse	r22, r1
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <pinMode+0x78>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:53
    uint8_t oldSREG = SREG;
    1b20:	4f b7       	in	r20, 0x3f	; 63
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:54
                cli();
    1b22:	f8 94       	cli
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:55
    *reg &= ~bit;
    1b24:	98 81       	ld	r25, Y
    1b26:	98 23       	and	r25, r24
    1b28:	98 83       	st	Y, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:56
    *out &= ~bit;
    1b2a:	f9 01       	movw	r30, r18
    1b2c:	90 81       	ld	r25, Z
    1b2e:	98 23       	and	r25, r24
    1b30:	90 83       	st	Z, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:57
    *pue &= ~bit;
    1b32:	9c 91       	ld	r25, X
    1b34:	89 23       	and	r24, r25
    1b36:	8c 93       	st	X, r24
    1b38:	0e c0       	rjmp	.+28     	; 0x1b56 <pinMode+0x94>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:59
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1b3a:	62 30       	cpi	r22, 0x02	; 2
    1b3c:	71 f4       	brne	.+28     	; 0x1b5a <pinMode+0x98>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:60
    uint8_t oldSREG = SREG;
    1b3e:	4f b7       	in	r20, 0x3f	; 63
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:61
                cli();
    1b40:	f8 94       	cli
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:62
    *reg &= ~bit;
    1b42:	58 81       	ld	r21, Y
    1b44:	85 23       	and	r24, r21
    1b46:	88 83       	st	Y, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:63
    *out |= bit;
    1b48:	f9 01       	movw	r30, r18
    1b4a:	80 81       	ld	r24, Z
    1b4c:	89 2b       	or	r24, r25
    1b4e:	80 83       	st	Z, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:64
    *pue |= bit;
    1b50:	ec 91       	ld	r30, X
    1b52:	9e 2b       	or	r25, r30
    1b54:	9c 93       	st	X, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:65
    SREG = oldSREG;
    1b56:	4f bf       	out	0x3f, r20	; 63
    1b58:	09 c0       	rjmp	.+18     	; 0x1b6c <pinMode+0xaa>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:67
  } else {
    uint8_t oldSREG = SREG;
    1b5a:	2f b7       	in	r18, 0x3f	; 63
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:68
                cli();
    1b5c:	f8 94       	cli
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:69
    *pue &= ~bit;
    1b5e:	3c 91       	ld	r19, X
    1b60:	83 23       	and	r24, r19
    1b62:	8c 93       	st	X, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:70
    *reg |= bit;
    1b64:	e8 81       	ld	r30, Y
    1b66:	9e 2b       	or	r25, r30
    1b68:	98 83       	st	Y, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:71
    SREG = oldSREG;
    1b6a:	2f bf       	out	0x3f, r18	; 63
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:73
  }
}
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <digitalWrite>:
digitalWrite():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:181
}

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:183
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin&63));}
    1b76:	86 ff       	sbrs	r24, 6
    1b78:	08 c0       	rjmp	.+16     	; 0x1b8a <digitalWrite+0x18>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:183 (discriminator 1)
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	9f 73       	andi	r25, 0x3F	; 63
    1b7e:	96 30       	cpi	r25, 0x06	; 6
    1b80:	10 f4       	brcc	.+4      	; 0x1b86 <digitalWrite+0x14>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:183 (discriminator 2)
    1b82:	85 e0       	ldi	r24, 0x05	; 5
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <digitalWrite+0x16>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:183 (discriminator 3)
    1b86:	86 e1       	ldi	r24, 0x16	; 22
    1b88:	89 1b       	sub	r24, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:185
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
    1b8a:	a8 2f       	mov	r26, r24
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	fd 01       	movw	r30, r26
    1b90:	e0 59       	subi	r30, 0x90	; 144
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	94 91       	lpm	r25, Z
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:186
  uint8_t port = digitalPinToPort(pin);
    1b96:	fd 01       	movw	r30, r26
    1b98:	ee 57       	subi	r30, 0x7E	; 126
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	a4 91       	lpm	r26, Z
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:189
  volatile uint8_t *out, *pue;

  if (port == NOT_A_PIN) return;
    1b9e:	aa 23       	and	r26, r26
    1ba0:	a9 f1       	breq	.+106    	; 0x1c0c <digitalWrite+0x9a>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:123
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
    1ba2:	8d 30       	cpi	r24, 0x0D	; 13
    1ba4:	19 f4       	brne	.+6      	; 0x1bac <digitalWrite+0x3a>
Timer0_SetCompareOutputModeA():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:692
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
    1ba6:	8b b3       	in	r24, 0x1b	; 27
    1ba8:	8f 73       	andi	r24, 0x3F	; 63
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <digitalWrite+0x42>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:131
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
    1bac:	83 30       	cpi	r24, 0x03	; 3
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <digitalWrite+0x46>
Timer0_SetCompareOutputModeB():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:697
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
    1bb0:	8b b3       	in	r24, 0x1b	; 27
    1bb2:	8f 7c       	andi	r24, 0xCF	; 207
    1bb4:	8b bb       	out	0x1b, r24	; 27
    1bb6:	0d c0       	rjmp	.+26     	; 0x1bd2 <digitalWrite+0x60>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:139
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
    1bb8:	8e 30       	cpi	r24, 0x0E	; 14
    1bba:	21 f4       	brne	.+8      	; 0x1bc4 <digitalWrite+0x52>
Timer1_SetCompareOutputModeA():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:852
}
timer1_com_t;

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeA( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
    1bbc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__EEPROM_REGION_LENGTH__+0x7f0072>
    1bc0:	8f 73       	andi	r24, 0x3F	; 63
    1bc2:	05 c0       	rjmp	.+10     	; 0x1bce <digitalWrite+0x5c>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:147
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 4
    if ( pin == CORE_PWM3_PIN )
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	29 f4       	brne	.+10     	; 0x1bd2 <digitalWrite+0x60>
Timer1_SetCompareOutputModeB():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:857
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
    1bc8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__EEPROM_REGION_LENGTH__+0x7f0072>
    1bcc:	8f 7c       	andi	r24, 0xCF	; 207
    1bce:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__EEPROM_REGION_LENGTH__+0x7f0072>
digitalWrite():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:195

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  turnOffPWM( pin );

  out = portOutputRegister(port);
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	fd 01       	movw	r30, r26
    1bd6:	e4 56       	subi	r30, 0x64	; 100
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	c4 91       	lpm	r28, Z
    1bdc:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:196
  pue = portPullupRegister(port);
    1bde:	fd 01       	movw	r30, r26
    1be0:	e8 56       	subi	r30, 0x68	; 104
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	a4 91       	lpm	r26, Z
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	89 2f       	mov	r24, r25
    1bea:	80 95       	com	r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:199

  if (val == LOW) {
    uint8_t oldSREG = SREG;
    1bec:	2f b7       	in	r18, 0x3f	; 63
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:198
  turnOffPWM( pin );

  out = portOutputRegister(port);
  pue = portPullupRegister(port);

  if (val == LOW) {
    1bee:	61 11       	cpse	r22, r1
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <digitalWrite+0x8a>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:200
    uint8_t oldSREG = SREG;
    cli();
    1bf2:	f8 94       	cli
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:201
    *out &= ~bit;
    1bf4:	98 81       	ld	r25, Y
    1bf6:	98 23       	and	r25, r24
    1bf8:	98 83       	st	Y, r25
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <digitalWrite+0x92>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:206
    *pue &= ~bit; //Turn off the pullups
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    1bfc:	f8 94       	cli
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:207
    *out |= bit;
    1bfe:	e8 81       	ld	r30, Y
    1c00:	e9 2b       	or	r30, r25
    1c02:	e8 83       	st	Y, r30
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:208
    *pue &= ~bit;
    1c04:	9c 91       	ld	r25, X
    1c06:	89 23       	and	r24, r25
    1c08:	8c 93       	st	X, r24
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:209
    SREG = oldSREG;
    1c0a:	2f bf       	out	0x3f, r18	; 63
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:211
  }
}
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <digitalRead>:
digitalRead():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:247
}
#endif

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
    1c12:	87 ff       	sbrs	r24, 7
    1c14:	08 c0       	rjmp	.+16     	; 0x1c26 <digitalRead+0x14>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:247 (discriminator 1)
    1c16:	98 2f       	mov	r25, r24
    1c18:	9f 77       	andi	r25, 0x7F	; 127
    1c1a:	96 30       	cpi	r25, 0x06	; 6
    1c1c:	10 f4       	brcc	.+4      	; 0x1c22 <digitalRead+0x10>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:247 (discriminator 2)
    1c1e:	85 e0       	ldi	r24, 0x05	; 5
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <digitalRead+0x12>
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:247 (discriminator 3)
    1c22:	86 e1       	ldi	r24, 0x16	; 22
    1c24:	89 1b       	sub	r24, r25
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:248
	uint8_t bit = digitalPinToBitMask(pin);
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	e0 59       	subi	r30, 0x90	; 144
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	94 91       	lpm	r25, Z
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:249
	uint8_t port = digitalPinToPort(pin);
    1c32:	f9 01       	movw	r30, r18
    1c34:	ee 57       	subi	r30, 0x7E	; 126
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	e4 91       	lpm	r30, Z
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:251

	if (port == NOT_A_PIN) return LOW;
    1c3a:	ee 23       	and	r30, r30
    1c3c:	21 f1       	breq	.+72     	; 0x1c86 <digitalRead+0x74>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:123
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
    1c3e:	8d 30       	cpi	r24, 0x0D	; 13
    1c40:	19 f4       	brne	.+6      	; 0x1c48 <digitalRead+0x36>
Timer0_SetCompareOutputModeA():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:692
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
    1c42:	8b b3       	in	r24, 0x1b	; 27
    1c44:	8f 73       	andi	r24, 0x3F	; 63
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <digitalRead+0x3e>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:131
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	21 f4       	brne	.+8      	; 0x1c54 <digitalRead+0x42>
Timer0_SetCompareOutputModeB():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:697
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
    1c4c:	8b b3       	in	r24, 0x1b	; 27
    1c4e:	8f 7c       	andi	r24, 0xCF	; 207
    1c50:	8b bb       	out	0x1b, r24	; 27
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <digitalRead+0x5c>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:139
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
    1c54:	8e 30       	cpi	r24, 0x0E	; 14
    1c56:	21 f4       	brne	.+8      	; 0x1c60 <digitalRead+0x4e>
Timer1_SetCompareOutputModeA():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:852
}
timer1_com_t;

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeA( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
    1c58:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__EEPROM_REGION_LENGTH__+0x7f0072>
    1c5c:	8f 73       	andi	r24, 0x3F	; 63
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <digitalRead+0x58>
turnOffPWM():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:147
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 4
    if ( pin == CORE_PWM3_PIN )
    1c60:	82 30       	cpi	r24, 0x02	; 2
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <digitalRead+0x5c>
Timer1_SetCompareOutputModeB():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/core_timers.h:857
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
    1c64:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__EEPROM_REGION_LENGTH__+0x7f0072>
    1c68:	8f 7c       	andi	r24, 0xCF	; 207
    1c6a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__EEPROM_REGION_LENGTH__+0x7f0072>
digitalRead():
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:257

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
  turnOffPWM( pin );

	if (*portInputRegister(port) & bit) return HIGH;
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	ec 56       	subi	r30, 0x6C	; 108
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	a4 91       	lpm	r26, Z
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ec 91       	ld	r30, X
    1c7a:	e9 23       	and	r30, r25
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	21 f4       	brne	.+8      	; 0x1c8a <digitalRead+0x78>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	08 95       	ret
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:251
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\zak\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tinymodern/wiring_digital.c:259
	// before getting a digital reading.
  turnOffPWM( pin );

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1c8a:	08 95       	ret

00001c8c <__subsf3>:
__subsf3():
    1c8c:	50 58       	subi	r21, 0x80	; 128

00001c8e <__addsf3>:
    1c8e:	bb 27       	eor	r27, r27
    1c90:	aa 27       	eor	r26, r26
    1c92:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__addsf3x>
    1c96:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__fp_round>
__addsf3():
    1c9a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__fp_pscA>
    1c9e:	38 f0       	brcs	.+14     	; 0x1cae <__addsf3+0x20>
    1ca0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__fp_pscB>
    1ca4:	20 f0       	brcs	.+8      	; 0x1cae <__addsf3+0x20>
    1ca6:	39 f4       	brne	.+14     	; 0x1cb6 <__addsf3+0x28>
    1ca8:	9f 3f       	cpi	r25, 0xFF	; 255
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <__addsf3+0x24>
    1cac:	26 f4       	brtc	.+8      	; 0x1cb6 <__addsf3+0x28>
    1cae:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_nan>
    1cb2:	0e f4       	brtc	.+2      	; 0x1cb6 <__addsf3+0x28>
    1cb4:	e0 95       	com	r30
    1cb6:	e7 fb       	bst	r30, 7
    1cb8:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_inf>

00001cbc <__addsf3x>:
__addsf3x():
    1cbc:	e9 2f       	mov	r30, r25
    1cbe:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fp_split3>
    1cc2:	58 f3       	brcs	.-42     	; 0x1c9a <__addsf3+0xc>
    1cc4:	ba 17       	cp	r27, r26
    1cc6:	62 07       	cpc	r22, r18
    1cc8:	73 07       	cpc	r23, r19
    1cca:	84 07       	cpc	r24, r20
    1ccc:	95 07       	cpc	r25, r21
    1cce:	20 f0       	brcs	.+8      	; 0x1cd8 <__addsf3x+0x1c>
    1cd0:	79 f4       	brne	.+30     	; 0x1cf0 <__addsf3x+0x34>
    1cd2:	a6 f5       	brtc	.+104    	; 0x1d3c <__addsf3x+0x80>
    1cd4:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__fp_zero>
    1cd8:	0e f4       	brtc	.+2      	; 0x1cdc <__addsf3x+0x20>
    1cda:	e0 95       	com	r30
    1cdc:	0b 2e       	mov	r0, r27
    1cde:	ba 2f       	mov	r27, r26
    1ce0:	a0 2d       	mov	r26, r0
    1ce2:	0b 01       	movw	r0, r22
    1ce4:	b9 01       	movw	r22, r18
    1ce6:	90 01       	movw	r18, r0
    1ce8:	0c 01       	movw	r0, r24
    1cea:	ca 01       	movw	r24, r20
    1cec:	a0 01       	movw	r20, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	ff 27       	eor	r31, r31
    1cf2:	59 1b       	sub	r21, r25
    1cf4:	99 f0       	breq	.+38     	; 0x1d1c <__addsf3x+0x60>
    1cf6:	59 3f       	cpi	r21, 0xF9	; 249
    1cf8:	50 f4       	brcc	.+20     	; 0x1d0e <__addsf3x+0x52>
    1cfa:	50 3e       	cpi	r21, 0xE0	; 224
    1cfc:	68 f1       	brcs	.+90     	; 0x1d58 <__addsf3x+0x9c>
    1cfe:	1a 16       	cp	r1, r26
    1d00:	f0 40       	sbci	r31, 0x00	; 0
    1d02:	a2 2f       	mov	r26, r18
    1d04:	23 2f       	mov	r18, r19
    1d06:	34 2f       	mov	r19, r20
    1d08:	44 27       	eor	r20, r20
    1d0a:	58 5f       	subi	r21, 0xF8	; 248
    1d0c:	f3 cf       	rjmp	.-26     	; 0x1cf4 <__addsf3x+0x38>
    1d0e:	46 95       	lsr	r20
    1d10:	37 95       	ror	r19
    1d12:	27 95       	ror	r18
    1d14:	a7 95       	ror	r26
    1d16:	f0 40       	sbci	r31, 0x00	; 0
    1d18:	53 95       	inc	r21
    1d1a:	c9 f7       	brne	.-14     	; 0x1d0e <__addsf3x+0x52>
    1d1c:	7e f4       	brtc	.+30     	; 0x1d3c <__addsf3x+0x80>
    1d1e:	1f 16       	cp	r1, r31
    1d20:	ba 0b       	sbc	r27, r26
    1d22:	62 0b       	sbc	r22, r18
    1d24:	73 0b       	sbc	r23, r19
    1d26:	84 0b       	sbc	r24, r20
    1d28:	ba f0       	brmi	.+46     	; 0x1d58 <__addsf3x+0x9c>
    1d2a:	91 50       	subi	r25, 0x01	; 1
    1d2c:	a1 f0       	breq	.+40     	; 0x1d56 <__addsf3x+0x9a>
    1d2e:	ff 0f       	add	r31, r31
    1d30:	bb 1f       	adc	r27, r27
    1d32:	66 1f       	adc	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	88 1f       	adc	r24, r24
    1d38:	c2 f7       	brpl	.-16     	; 0x1d2a <__addsf3x+0x6e>
    1d3a:	0e c0       	rjmp	.+28     	; 0x1d58 <__addsf3x+0x9c>
    1d3c:	ba 0f       	add	r27, r26
    1d3e:	62 1f       	adc	r22, r18
    1d40:	73 1f       	adc	r23, r19
    1d42:	84 1f       	adc	r24, r20
    1d44:	48 f4       	brcc	.+18     	; 0x1d58 <__addsf3x+0x9c>
    1d46:	87 95       	ror	r24
    1d48:	77 95       	ror	r23
    1d4a:	67 95       	ror	r22
    1d4c:	b7 95       	ror	r27
    1d4e:	f7 95       	ror	r31
    1d50:	9e 3f       	cpi	r25, 0xFE	; 254
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <__addsf3x+0x9a>
    1d54:	b0 cf       	rjmp	.-160    	; 0x1cb6 <__addsf3+0x28>
    1d56:	93 95       	inc	r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <__addsf3x+0xa2>
    1d5c:	99 27       	eor	r25, r25
    1d5e:	ee 0f       	add	r30, r30
    1d60:	97 95       	ror	r25
    1d62:	87 95       	ror	r24
    1d64:	08 95       	ret

00001d66 <__cmpsf2>:
    1d66:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_cmp>
    1d6a:	08 f4       	brcc	.+2      	; 0x1d6e <__cmpsf2+0x8>
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	08 95       	ret

00001d70 <__divsf3>:
    1d70:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <__divsf3x>
    1d74:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__fp_round>
    1d78:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__fp_pscB>
    1d7c:	58 f0       	brcs	.+22     	; 0x1d94 <__divsf3+0x24>
    1d7e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__fp_pscA>
    1d82:	40 f0       	brcs	.+16     	; 0x1d94 <__divsf3+0x24>
    1d84:	29 f4       	brne	.+10     	; 0x1d90 <__divsf3+0x20>
    1d86:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    1d88:	29 f0       	breq	.+10     	; 0x1d94 <__divsf3+0x24>
    1d8a:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_inf>
    1d8e:	51 11       	cpse	r21, r1
    1d90:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_szero>
    1d94:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_nan>

00001d98 <__divsf3x>:
__divsf3x():
    1d98:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fp_split3>
    1d9c:	68 f3       	brcs	.-38     	; 0x1d78 <__divsf3+0x8>

00001d9e <__divsf3_pse>:
    1d9e:	99 23       	and	r25, r25
    1da0:	b1 f3       	breq	.-20     	; 0x1d8e <__divsf3+0x1e>
    1da2:	55 23       	and	r21, r21
    1da4:	91 f3       	breq	.-28     	; 0x1d8a <__divsf3+0x1a>
    1da6:	95 1b       	sub	r25, r21
    1da8:	55 0b       	sbc	r21, r21
    1daa:	bb 27       	eor	r27, r27
    1dac:	aa 27       	eor	r26, r26
    1dae:	62 17       	cp	r22, r18
    1db0:	73 07       	cpc	r23, r19
    1db2:	84 07       	cpc	r24, r20
    1db4:	38 f0       	brcs	.+14     	; 0x1dc4 <__divsf3_pse+0x26>
    1db6:	9f 5f       	subi	r25, 0xFF	; 255
    1db8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dba:	22 0f       	add	r18, r18
    1dbc:	33 1f       	adc	r19, r19
    1dbe:	44 1f       	adc	r20, r20
    1dc0:	aa 1f       	adc	r26, r26
    1dc2:	a9 f3       	breq	.-22     	; 0x1dae <__divsf3_pse+0x10>
    1dc4:	35 d0       	rcall	.+106    	; 0x1e30 <__divsf3_pse+0x92>
    1dc6:	0e 2e       	mov	r0, r30
    1dc8:	3a f0       	brmi	.+14     	; 0x1dd8 <__divsf3_pse+0x3a>
    1dca:	e0 e8       	ldi	r30, 0x80	; 128
    1dcc:	32 d0       	rcall	.+100    	; 0x1e32 <__divsf3_pse+0x94>
    1dce:	91 50       	subi	r25, 0x01	; 1
    1dd0:	50 40       	sbci	r21, 0x00	; 0
    1dd2:	e6 95       	lsr	r30
    1dd4:	00 1c       	adc	r0, r0
    1dd6:	ca f7       	brpl	.-14     	; 0x1dca <__divsf3_pse+0x2c>
    1dd8:	2b d0       	rcall	.+86     	; 0x1e30 <__divsf3_pse+0x92>
    1dda:	fe 2f       	mov	r31, r30
    1ddc:	29 d0       	rcall	.+82     	; 0x1e30 <__divsf3_pse+0x92>
    1dde:	66 0f       	add	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 1f       	adc	r24, r24
    1de4:	bb 1f       	adc	r27, r27
    1de6:	26 17       	cp	r18, r22
    1de8:	37 07       	cpc	r19, r23
    1dea:	48 07       	cpc	r20, r24
    1dec:	ab 07       	cpc	r26, r27
    1dee:	b0 e8       	ldi	r27, 0x80	; 128
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <__divsf3_pse+0x56>
    1df2:	bb 0b       	sbc	r27, r27
    1df4:	80 2d       	mov	r24, r0
    1df6:	bf 01       	movw	r22, r30
    1df8:	ff 27       	eor	r31, r31
    1dfa:	93 58       	subi	r25, 0x83	; 131
    1dfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfe:	3a f0       	brmi	.+14     	; 0x1e0e <__divsf3_pse+0x70>
    1e00:	9e 3f       	cpi	r25, 0xFE	; 254
    1e02:	51 05       	cpc	r21, r1
    1e04:	78 f0       	brcs	.+30     	; 0x1e24 <__divsf3_pse+0x86>
    1e06:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_inf>
    1e0a:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_szero>
    1e0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e10:	e4 f3       	brlt	.-8      	; 0x1e0a <__divsf3_pse+0x6c>
    1e12:	98 3e       	cpi	r25, 0xE8	; 232
    1e14:	d4 f3       	brlt	.-12     	; 0x1e0a <__divsf3_pse+0x6c>
    1e16:	86 95       	lsr	r24
    1e18:	77 95       	ror	r23
    1e1a:	67 95       	ror	r22
    1e1c:	b7 95       	ror	r27
    1e1e:	f7 95       	ror	r31
    1e20:	9f 5f       	subi	r25, 0xFF	; 255
    1e22:	c9 f7       	brne	.-14     	; 0x1e16 <__divsf3_pse+0x78>
    1e24:	88 0f       	add	r24, r24
    1e26:	91 1d       	adc	r25, r1
    1e28:	96 95       	lsr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	97 f9       	bld	r25, 7
    1e2e:	08 95       	ret
    1e30:	e1 e0       	ldi	r30, 0x01	; 1
    1e32:	66 0f       	add	r22, r22
    1e34:	77 1f       	adc	r23, r23
    1e36:	88 1f       	adc	r24, r24
    1e38:	bb 1f       	adc	r27, r27
    1e3a:	62 17       	cp	r22, r18
    1e3c:	73 07       	cpc	r23, r19
    1e3e:	84 07       	cpc	r24, r20
    1e40:	ba 07       	cpc	r27, r26
    1e42:	20 f0       	brcs	.+8      	; 0x1e4c <__divsf3_pse+0xae>
    1e44:	62 1b       	sub	r22, r18
    1e46:	73 0b       	sbc	r23, r19
    1e48:	84 0b       	sbc	r24, r20
    1e4a:	ba 0b       	sbc	r27, r26
    1e4c:	ee 1f       	adc	r30, r30
    1e4e:	88 f7       	brcc	.-30     	; 0x1e32 <__divsf3_pse+0x94>
    1e50:	e0 95       	com	r30
    1e52:	08 95       	ret

00001e54 <__fixsfsi>:
    1e54:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__fixunssfsi>
    1e58:	68 94       	set
    1e5a:	b1 11       	cpse	r27, r1
    1e5c:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_szero>
    1e60:	08 95       	ret

00001e62 <__fixunssfsi>:
    1e62:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__fp_splitA>
    1e66:	88 f0       	brcs	.+34     	; 0x1e8a <__fixunssfsi+0x28>
    1e68:	9f 57       	subi	r25, 0x7F	; 127
    1e6a:	98 f0       	brcs	.+38     	; 0x1e92 <__fixunssfsi+0x30>
    1e6c:	b9 2f       	mov	r27, r25
    1e6e:	99 27       	eor	r25, r25
    1e70:	b7 51       	subi	r27, 0x17	; 23
    1e72:	b0 f0       	brcs	.+44     	; 0x1ea0 <__fixunssfsi+0x3e>
__fixunssfsi():
    1e74:	e1 f0       	breq	.+56     	; 0x1eae <__fixunssfsi+0x4c>
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	1a f0       	brmi	.+6      	; 0x1e86 <__fixunssfsi+0x24>
    1e80:	ba 95       	dec	r27
    1e82:	c9 f7       	brne	.-14     	; 0x1e76 <__fixunssfsi+0x14>
    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <__fixunssfsi+0x4c>
    1e86:	b1 30       	cpi	r27, 0x01	; 1
    1e88:	91 f0       	breq	.+36     	; 0x1eae <__fixunssfsi+0x4c>
    1e8a:	0e 94 0b 10 	call	0x2016	; 0x2016 <__fp_zero>
    1e8e:	b1 e0       	ldi	r27, 0x01	; 1
    1e90:	08 95       	ret
    1e92:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__fp_zero>
    1e96:	67 2f       	mov	r22, r23
    1e98:	78 2f       	mov	r23, r24
    1e9a:	88 27       	eor	r24, r24
    1e9c:	b8 5f       	subi	r27, 0xF8	; 248
    1e9e:	39 f0       	breq	.+14     	; 0x1eae <__fixunssfsi+0x4c>
    1ea0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ea2:	cc f3       	brlt	.-14     	; 0x1e96 <__fixunssfsi+0x34>
    1ea4:	86 95       	lsr	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b3 95       	inc	r27
    1eac:	d9 f7       	brne	.-10     	; 0x1ea4 <__fixunssfsi+0x42>
    1eae:	3e f4       	brtc	.+14     	; 0x1ebe <__fixunssfsi+0x5c>
    1eb0:	90 95       	com	r25
    1eb2:	80 95       	com	r24
    1eb4:	70 95       	com	r23
    1eb6:	61 95       	neg	r22
    1eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eba:	8f 4f       	sbci	r24, 0xFF	; 255
    1ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebe:	08 95       	ret

00001ec0 <__floatunsisf>:
__floatunsisf():
    1ec0:	e8 94       	clt
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <__floatsisf+0x12>

00001ec4 <__floatsisf>:
    1ec4:	97 fb       	bst	r25, 7
    1ec6:	3e f4       	brtc	.+14     	; 0x1ed6 <__floatsisf+0x12>
    1ec8:	90 95       	com	r25
    1eca:	80 95       	com	r24
    1ecc:	70 95       	com	r23
    1ece:	61 95       	neg	r22
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	99 23       	and	r25, r25
    1ed8:	a9 f0       	breq	.+42     	; 0x1f04 <__floatsisf+0x40>
    1eda:	f9 2f       	mov	r31, r25
    1edc:	96 e9       	ldi	r25, 0x96	; 150
    1ede:	bb 27       	eor	r27, r27
    1ee0:	93 95       	inc	r25
    1ee2:	f6 95       	lsr	r31
    1ee4:	87 95       	ror	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f1 11       	cpse	r31, r1
    1eee:	f8 cf       	rjmp	.-16     	; 0x1ee0 <__floatsisf+0x1c>
    1ef0:	fa f4       	brpl	.+62     	; 0x1f30 <__floatsisf+0x6c>
    1ef2:	bb 0f       	add	r27, r27
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <__floatsisf+0x36>
    1ef6:	60 ff       	sbrs	r22, 0
    1ef8:	1b c0       	rjmp	.+54     	; 0x1f30 <__floatsisf+0x6c>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	16 c0       	rjmp	.+44     	; 0x1f30 <__floatsisf+0x6c>
    1f04:	88 23       	and	r24, r24
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <__floatsisf+0x48>
    1f08:	96 e9       	ldi	r25, 0x96	; 150
    1f0a:	11 c0       	rjmp	.+34     	; 0x1f2e <__floatsisf+0x6a>
    1f0c:	77 23       	and	r23, r23
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <__floatsisf+0x54>
    1f10:	9e e8       	ldi	r25, 0x8E	; 142
    1f12:	87 2f       	mov	r24, r23
    1f14:	76 2f       	mov	r23, r22
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <__floatsisf+0x5e>
    1f18:	66 23       	and	r22, r22
    1f1a:	71 f0       	breq	.+28     	; 0x1f38 <__floatsisf+0x74>
    1f1c:	96 e8       	ldi	r25, 0x86	; 134
    1f1e:	86 2f       	mov	r24, r22
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	2a f0       	brmi	.+10     	; 0x1f30 <__floatsisf+0x6c>
    1f26:	9a 95       	dec	r25
    1f28:	66 0f       	add	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	da f7       	brpl	.-10     	; 0x1f26 <__floatsisf+0x62>
    1f30:	88 0f       	add	r24, r24
    1f32:	96 95       	lsr	r25
    1f34:	87 95       	ror	r24
    1f36:	97 f9       	bld	r25, 7
    1f38:	08 95       	ret

00001f3a <__fp_cmp>:
__fp_cmp():
    1f3a:	99 0f       	add	r25, r25
    1f3c:	00 08       	sbc	r0, r0
    1f3e:	55 0f       	add	r21, r21
    1f40:	aa 0b       	sbc	r26, r26
    1f42:	e0 e8       	ldi	r30, 0x80	; 128
    1f44:	fe ef       	ldi	r31, 0xFE	; 254
    1f46:	16 16       	cp	r1, r22
    1f48:	17 06       	cpc	r1, r23
    1f4a:	e8 07       	cpc	r30, r24
    1f4c:	f9 07       	cpc	r31, r25
    1f4e:	c0 f0       	brcs	.+48     	; 0x1f80 <__fp_cmp+0x46>
    1f50:	12 16       	cp	r1, r18
    1f52:	13 06       	cpc	r1, r19
    1f54:	e4 07       	cpc	r30, r20
    1f56:	f5 07       	cpc	r31, r21
    1f58:	98 f0       	brcs	.+38     	; 0x1f80 <__fp_cmp+0x46>
    1f5a:	62 1b       	sub	r22, r18
    1f5c:	73 0b       	sbc	r23, r19
    1f5e:	84 0b       	sbc	r24, r20
    1f60:	95 0b       	sbc	r25, r21
    1f62:	39 f4       	brne	.+14     	; 0x1f72 <__fp_cmp+0x38>
    1f64:	0a 26       	eor	r0, r26
    1f66:	61 f0       	breq	.+24     	; 0x1f80 <__fp_cmp+0x46>
    1f68:	23 2b       	or	r18, r19
    1f6a:	24 2b       	or	r18, r20
    1f6c:	25 2b       	or	r18, r21
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <__fp_cmp+0x3e>
    1f70:	08 95       	ret
    1f72:	0a 26       	eor	r0, r26
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <__fp_cmp+0x3e>
    1f76:	a1 40       	sbci	r26, 0x01	; 1
    1f78:	a6 95       	lsr	r26
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	81 1d       	adc	r24, r1
    1f7e:	81 1d       	adc	r24, r1
    1f80:	08 95       	ret

00001f82 <__fp_inf>:
__fp_inf():
    1f82:	97 f9       	bld	r25, 7
    1f84:	9f 67       	ori	r25, 0x7F	; 127
    1f86:	80 e8       	ldi	r24, 0x80	; 128
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	08 95       	ret

00001f8e <__fp_nan>:
__fp_nan():
    1f8e:	9f ef       	ldi	r25, 0xFF	; 255
    1f90:	80 ec       	ldi	r24, 0xC0	; 192
    1f92:	08 95       	ret

00001f94 <__fp_pscA>:
__fp_pscA():
    1f94:	00 24       	eor	r0, r0
    1f96:	0a 94       	dec	r0
    1f98:	16 16       	cp	r1, r22
    1f9a:	17 06       	cpc	r1, r23
    1f9c:	18 06       	cpc	r1, r24
    1f9e:	09 06       	cpc	r0, r25
    1fa0:	08 95       	ret

00001fa2 <__fp_pscB>:
__fp_pscB():
    1fa2:	00 24       	eor	r0, r0
    1fa4:	0a 94       	dec	r0
    1fa6:	12 16       	cp	r1, r18
    1fa8:	13 06       	cpc	r1, r19
    1faa:	14 06       	cpc	r1, r20
    1fac:	05 06       	cpc	r0, r21
    1fae:	08 95       	ret

00001fb0 <__fp_round>:
__fp_round():
    1fb0:	09 2e       	mov	r0, r25
    1fb2:	03 94       	inc	r0
    1fb4:	00 0c       	add	r0, r0
    1fb6:	11 f4       	brne	.+4      	; 0x1fbc <__fp_round+0xc>
    1fb8:	88 23       	and	r24, r24
    1fba:	52 f0       	brmi	.+20     	; 0x1fd0 <__fp_round+0x20>
    1fbc:	bb 0f       	add	r27, r27
    1fbe:	40 f4       	brcc	.+16     	; 0x1fd0 <__fp_round+0x20>
    1fc0:	bf 2b       	or	r27, r31
    1fc2:	11 f4       	brne	.+4      	; 0x1fc8 <__fp_round+0x18>
    1fc4:	60 ff       	sbrs	r22, 0
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <__fp_round+0x20>
    1fc8:	6f 5f       	subi	r22, 0xFF	; 255
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	08 95       	ret

00001fd2 <__fp_split3>:
__fp_split3():
    1fd2:	57 fd       	sbrc	r21, 7
    1fd4:	90 58       	subi	r25, 0x80	; 128
    1fd6:	44 0f       	add	r20, r20
    1fd8:	55 1f       	adc	r21, r21
    1fda:	59 f0       	breq	.+22     	; 0x1ff2 <__fp_splitA+0x10>
    1fdc:	5f 3f       	cpi	r21, 0xFF	; 255
    1fde:	71 f0       	breq	.+28     	; 0x1ffc <__fp_splitA+0x1a>
    1fe0:	47 95       	ror	r20

00001fe2 <__fp_splitA>:
    1fe2:	88 0f       	add	r24, r24
    1fe4:	97 fb       	bst	r25, 7
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	61 f0       	breq	.+24     	; 0x2002 <__fp_splitA+0x20>
    1fea:	9f 3f       	cpi	r25, 0xFF	; 255
    1fec:	79 f0       	breq	.+30     	; 0x200c <__fp_splitA+0x2a>
    1fee:	87 95       	ror	r24
    1ff0:	08 95       	ret
    1ff2:	12 16       	cp	r1, r18
    1ff4:	13 06       	cpc	r1, r19
    1ff6:	14 06       	cpc	r1, r20
    1ff8:	55 1f       	adc	r21, r21
    1ffa:	f2 cf       	rjmp	.-28     	; 0x1fe0 <__fp_split3+0xe>
    1ffc:	46 95       	lsr	r20
    1ffe:	f1 df       	rcall	.-30     	; 0x1fe2 <__fp_splitA>
    2000:	08 c0       	rjmp	.+16     	; 0x2012 <__fp_splitA+0x30>
    2002:	16 16       	cp	r1, r22
    2004:	17 06       	cpc	r1, r23
    2006:	18 06       	cpc	r1, r24
    2008:	99 1f       	adc	r25, r25
    200a:	f1 cf       	rjmp	.-30     	; 0x1fee <__fp_splitA+0xc>
    200c:	86 95       	lsr	r24
    200e:	71 05       	cpc	r23, r1
    2010:	61 05       	cpc	r22, r1
    2012:	08 94       	sec
    2014:	08 95       	ret

00002016 <__fp_zero>:
__fp_zero():
    2016:	e8 94       	clt

00002018 <__fp_szero>:
    2018:	bb 27       	eor	r27, r27
    201a:	66 27       	eor	r22, r22
    201c:	77 27       	eor	r23, r23
    201e:	cb 01       	movw	r24, r22
    2020:	97 f9       	bld	r25, 7
    2022:	08 95       	ret

00002024 <__gesf2>:
__gesf2():
    2024:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_cmp>
    2028:	08 f4       	brcc	.+2      	; 0x202c <__gesf2+0x8>
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	08 95       	ret

0000202e <__mulsf3>:
__mulsf3():
    202e:	0e 94 29 10 	call	0x2052	; 0x2052 <__mulsf3x>
    2032:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__fp_round>
    2036:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__fp_pscA>
    203a:	38 f0       	brcs	.+14     	; 0x204a <__mulsf3+0x1c>
    203c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__fp_pscB>
    2040:	20 f0       	brcs	.+8      	; 0x204a <__mulsf3+0x1c>
    2042:	95 23       	and	r25, r21
    2044:	11 f0       	breq	.+4      	; 0x204a <__mulsf3+0x1c>
    2046:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_inf>
    204a:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__fp_nan>
    204e:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_szero>

00002052 <__mulsf3x>:
__mulsf3x():
    2052:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fp_split3>
    2056:	78 f3       	brcs	.-34     	; 0x2036 <__mulsf3+0x8>

00002058 <__mulsf3_pse>:
    2058:	99 23       	and	r25, r25
    205a:	c9 f3       	breq	.-14     	; 0x204e <__mulsf3+0x20>
    205c:	55 23       	and	r21, r21
    205e:	b9 f3       	breq	.-18     	; 0x204e <__mulsf3+0x20>
    2060:	95 0f       	add	r25, r21
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	55 1f       	adc	r21, r21
    2066:	aa 27       	eor	r26, r26
    2068:	ee 27       	eor	r30, r30
    206a:	ff 27       	eor	r31, r31
    206c:	bb 27       	eor	r27, r27
    206e:	00 24       	eor	r0, r0
    2070:	08 94       	sec
    2072:	67 95       	ror	r22
    2074:	20 f4       	brcc	.+8      	; 0x207e <__mulsf3_pse+0x26>
    2076:	e2 0f       	add	r30, r18
    2078:	f3 1f       	adc	r31, r19
    207a:	b4 1f       	adc	r27, r20
    207c:	0a 1e       	adc	r0, r26
    207e:	22 0f       	add	r18, r18
    2080:	33 1f       	adc	r19, r19
    2082:	44 1f       	adc	r20, r20
    2084:	aa 1f       	adc	r26, r26
    2086:	66 95       	lsr	r22
    2088:	a9 f7       	brne	.-22     	; 0x2074 <__mulsf3_pse+0x1c>
    208a:	77 95       	ror	r23
    208c:	30 f4       	brcc	.+12     	; 0x209a <__mulsf3_pse+0x42>
    208e:	f3 0f       	add	r31, r19
    2090:	b4 1f       	adc	r27, r20
    2092:	0a 1e       	adc	r0, r26
    2094:	12 1e       	adc	r1, r18
    2096:	08 f4       	brcc	.+2      	; 0x209a <__mulsf3_pse+0x42>
    2098:	63 95       	inc	r22
    209a:	33 0f       	add	r19, r19
    209c:	44 1f       	adc	r20, r20
    209e:	aa 1f       	adc	r26, r26
    20a0:	22 1f       	adc	r18, r18
    20a2:	76 95       	lsr	r23
    20a4:	99 f7       	brne	.-26     	; 0x208c <__mulsf3_pse+0x34>
    20a6:	87 95       	ror	r24
    20a8:	20 f4       	brcc	.+8      	; 0x20b2 <__mulsf3_pse+0x5a>
    20aa:	b4 0f       	add	r27, r20
    20ac:	0a 1e       	adc	r0, r26
    20ae:	12 1e       	adc	r1, r18
    20b0:	63 1f       	adc	r22, r19
    20b2:	44 0f       	add	r20, r20
    20b4:	aa 1f       	adc	r26, r26
    20b6:	22 1f       	adc	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	86 95       	lsr	r24
    20bc:	a9 f7       	brne	.-22     	; 0x20a8 <__mulsf3_pse+0x50>
    20be:	86 2f       	mov	r24, r22
    20c0:	71 2d       	mov	r23, r1
    20c2:	60 2d       	mov	r22, r0
    20c4:	11 24       	eor	r1, r1
    20c6:	9f 57       	subi	r25, 0x7F	; 127
    20c8:	50 40       	sbci	r21, 0x00	; 0
    20ca:	9a f0       	brmi	.+38     	; 0x20f2 <__mulsf3_pse+0x9a>
    20cc:	f1 f0       	breq	.+60     	; 0x210a <__mulsf3_pse+0xb2>
    20ce:	88 23       	and	r24, r24
    20d0:	4a f0       	brmi	.+18     	; 0x20e4 <__mulsf3_pse+0x8c>
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	bb 1f       	adc	r27, r27
    20d8:	66 1f       	adc	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	91 50       	subi	r25, 0x01	; 1
    20e0:	50 40       	sbci	r21, 0x00	; 0
    20e2:	a9 f7       	brne	.-22     	; 0x20ce <__mulsf3_pse+0x76>
    20e4:	9e 3f       	cpi	r25, 0xFE	; 254
    20e6:	51 05       	cpc	r21, r1
    20e8:	80 f0       	brcs	.+32     	; 0x210a <__mulsf3_pse+0xb2>
    20ea:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_inf>
    20ee:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_szero>
    20f2:	5f 3f       	cpi	r21, 0xFF	; 255
    20f4:	e4 f3       	brlt	.-8      	; 0x20ee <__mulsf3_pse+0x96>
    20f6:	98 3e       	cpi	r25, 0xE8	; 232
    20f8:	d4 f3       	brlt	.-12     	; 0x20ee <__mulsf3_pse+0x96>
    20fa:	86 95       	lsr	r24
    20fc:	77 95       	ror	r23
    20fe:	67 95       	ror	r22
    2100:	b7 95       	ror	r27
    2102:	f7 95       	ror	r31
    2104:	e7 95       	ror	r30
    2106:	9f 5f       	subi	r25, 0xFF	; 255
    2108:	c1 f7       	brne	.-16     	; 0x20fa <__mulsf3_pse+0xa2>
    210a:	fe 2b       	or	r31, r30
    210c:	88 0f       	add	r24, r24
    210e:	91 1d       	adc	r25, r1
    2110:	96 95       	lsr	r25
    2112:	87 95       	ror	r24
    2114:	97 f9       	bld	r25, 7
    2116:	08 95       	ret

00002118 <__unordsf2>:
    2118:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_cmp>
    211c:	88 0b       	sbc	r24, r24
    211e:	99 0b       	sbc	r25, r25
    2120:	08 95       	ret

00002122 <__mulqi3>:
    2122:	00 24       	eor	r0, r0

00002124 <__mulqi3_loop>:
    2124:	80 fd       	sbrc	r24, 0
    2126:	06 0e       	add	r0, r22
    2128:	66 0f       	add	r22, r22
    212a:	11 f0       	breq	.+4      	; 0x2130 <__mulqi3_exit>
    212c:	86 95       	lsr	r24
    212e:	d1 f7       	brne	.-12     	; 0x2124 <__mulqi3_loop>

00002130 <__mulqi3_exit>:
    2130:	80 2d       	mov	r24, r0
    2132:	08 95       	ret

00002134 <__udivmodqi4>:
__udivmodqi4():
    2134:	99 1b       	sub	r25, r25
    2136:	79 e0       	ldi	r23, 0x09	; 9
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <__udivmodqi4_ep>

0000213a <__udivmodqi4_loop>:
    213a:	99 1f       	adc	r25, r25
    213c:	96 17       	cp	r25, r22
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__udivmodqi4_ep>
    2140:	96 1b       	sub	r25, r22

00002142 <__udivmodqi4_ep>:
    2142:	88 1f       	adc	r24, r24
    2144:	7a 95       	dec	r23
    2146:	c9 f7       	brne	.-14     	; 0x213a <__udivmodqi4_loop>
    2148:	80 95       	com	r24
    214a:	08 95       	ret

0000214c <__udivmodsi4>:
__udivmodsi4():
    214c:	a1 e2       	ldi	r26, 0x21	; 33
    214e:	1a 2e       	mov	r1, r26
    2150:	aa 1b       	sub	r26, r26
    2152:	bb 1b       	sub	r27, r27
    2154:	fd 01       	movw	r30, r26
    2156:	0d c0       	rjmp	.+26     	; 0x2172 <__udivmodsi4_ep>

00002158 <__udivmodsi4_loop>:
    2158:	aa 1f       	adc	r26, r26
    215a:	bb 1f       	adc	r27, r27
    215c:	ee 1f       	adc	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	a2 17       	cp	r26, r18
    2162:	b3 07       	cpc	r27, r19
    2164:	e4 07       	cpc	r30, r20
    2166:	f5 07       	cpc	r31, r21
    2168:	20 f0       	brcs	.+8      	; 0x2172 <__udivmodsi4_ep>
    216a:	a2 1b       	sub	r26, r18
    216c:	b3 0b       	sbc	r27, r19
    216e:	e4 0b       	sbc	r30, r20
    2170:	f5 0b       	sbc	r31, r21

00002172 <__udivmodsi4_ep>:
    2172:	66 1f       	adc	r22, r22
    2174:	77 1f       	adc	r23, r23
    2176:	88 1f       	adc	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	1a 94       	dec	r1
    217c:	69 f7       	brne	.-38     	; 0x2158 <__udivmodsi4_loop>
    217e:	60 95       	com	r22
    2180:	70 95       	com	r23
    2182:	80 95       	com	r24
    2184:	90 95       	com	r25
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
    218a:	bd 01       	movw	r22, r26
    218c:	cf 01       	movw	r24, r30
    218e:	08 95       	ret

00002190 <__divmodsi4>:
__divmodsi4():
    2190:	05 2e       	mov	r0, r21
    2192:	97 fb       	bst	r25, 7
    2194:	1e f4       	brtc	.+6      	; 0x219c <__divmodsi4+0xc>
    2196:	00 94       	com	r0
    2198:	0e 94 df 10 	call	0x21be	; 0x21be <__negsi2>
    219c:	57 fd       	sbrc	r21, 7
    219e:	07 d0       	rcall	.+14     	; 0x21ae <__divmodsi4_neg2>
    21a0:	0e 94 a6 10 	call	0x214c	; 0x214c <__udivmodsi4>
    21a4:	07 fc       	sbrc	r0, 7
    21a6:	03 d0       	rcall	.+6      	; 0x21ae <__divmodsi4_neg2>
    21a8:	4e f4       	brtc	.+18     	; 0x21bc <__divmodsi4_exit>
    21aa:	0c 94 df 10 	jmp	0x21be	; 0x21be <__negsi2>

000021ae <__divmodsi4_neg2>:
    21ae:	50 95       	com	r21
    21b0:	40 95       	com	r20
    21b2:	30 95       	com	r19
    21b4:	21 95       	neg	r18
    21b6:	3f 4f       	sbci	r19, 0xFF	; 255
    21b8:	4f 4f       	sbci	r20, 0xFF	; 255
    21ba:	5f 4f       	sbci	r21, 0xFF	; 255

000021bc <__divmodsi4_exit>:
    21bc:	08 95       	ret

000021be <__negsi2>:
__negsi2():
    21be:	90 95       	com	r25
    21c0:	80 95       	com	r24
    21c2:	70 95       	com	r23
    21c4:	61 95       	neg	r22
    21c6:	7f 4f       	sbci	r23, 0xFF	; 255
    21c8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	08 95       	ret

000021ce <__mulsidi3>:
__mulsidi3():
    21ce:	68 94       	set
    21d0:	00 13       	cpse	r16, r16

000021d2 <__umulsidi3>:
__umulsidi3():
    21d2:	e8 94       	clt
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e0 ef       	ldi	r30, 0xF0	; 240
    21da:	f0 e1       	ldi	r31, 0x10	; 16
    21dc:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__prologue_saves__+0x10>
    21e0:	ef ef       	ldi	r30, 0xFF	; 255
    21e2:	e7 f9       	bld	r30, 7
    21e4:	59 01       	movw	r10, r18
    21e6:	6a 01       	movw	r12, r20
    21e8:	5e 23       	and	r21, r30
    21ea:	55 0f       	add	r21, r21
    21ec:	ee 08       	sbc	r14, r14
    21ee:	fe 2c       	mov	r15, r14
    21f0:	87 01       	movw	r16, r14
    21f2:	9b 01       	movw	r18, r22
    21f4:	ac 01       	movw	r20, r24
    21f6:	9e 23       	and	r25, r30
    21f8:	99 0f       	add	r25, r25
    21fa:	66 0b       	sbc	r22, r22
    21fc:	76 2f       	mov	r23, r22
    21fe:	cb 01       	movw	r24, r22
    2200:	0e 94 44 11 	call	0x2288	; 0x2288 <__muldi3>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	ea e0       	ldi	r30, 0x0A	; 10
    220a:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__epilogue_restores__+0x10>

0000220e <__prologue_saves__>:
__prologue_saves__():
    220e:	2f 92       	push	r2
    2210:	3f 92       	push	r3
    2212:	4f 92       	push	r4
    2214:	5f 92       	push	r5
    2216:	6f 92       	push	r6
    2218:	7f 92       	push	r7
    221a:	8f 92       	push	r8
    221c:	9f 92       	push	r9
    221e:	af 92       	push	r10
    2220:	bf 92       	push	r11
    2222:	cf 92       	push	r12
    2224:	df 92       	push	r13
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	ca 1b       	sub	r28, r26
    2238:	db 0b       	sbc	r29, r27
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	09 94       	ijmp

00002246 <__epilogue_restores__>:
__epilogue_restores__():
    2246:	2a 88       	ldd	r2, Y+18	; 0x12
    2248:	39 88       	ldd	r3, Y+17	; 0x11
    224a:	48 88       	ldd	r4, Y+16	; 0x10
    224c:	5f 84       	ldd	r5, Y+15	; 0x0f
    224e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2250:	7d 84       	ldd	r7, Y+13	; 0x0d
    2252:	8c 84       	ldd	r8, Y+12	; 0x0c
    2254:	9b 84       	ldd	r9, Y+11	; 0x0b
    2256:	aa 84       	ldd	r10, Y+10	; 0x0a
    2258:	b9 84       	ldd	r11, Y+9	; 0x09
    225a:	c8 84       	ldd	r12, Y+8	; 0x08
    225c:	df 80       	ldd	r13, Y+7	; 0x07
    225e:	ee 80       	ldd	r14, Y+6	; 0x06
    2260:	fd 80       	ldd	r15, Y+5	; 0x05
    2262:	0c 81       	ldd	r16, Y+4	; 0x04
    2264:	1b 81       	ldd	r17, Y+3	; 0x03
    2266:	aa 81       	ldd	r26, Y+2	; 0x02
    2268:	b9 81       	ldd	r27, Y+1	; 0x01
    226a:	ce 0f       	add	r28, r30
    226c:	d1 1d       	adc	r29, r1
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	ed 01       	movw	r28, r26
    227a:	08 95       	ret

0000227c <__tablejump2__>:
__tablejump2__():
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	05 90       	lpm	r0, Z+
    2282:	f4 91       	lpm	r31, Z
    2284:	e0 2d       	mov	r30, r0
    2286:	09 94       	ijmp

00002288 <__muldi3>:
__muldi3():
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	9f 92       	push	r9
    228e:	a0 e4       	ldi	r26, 0x40	; 64
    2290:	9a 2e       	mov	r9, r26
    2292:	00 24       	eor	r0, r0
    2294:	d0 01       	movw	r26, r0
    2296:	e0 01       	movw	r28, r0
    2298:	f0 01       	movw	r30, r0
    229a:	16 95       	lsr	r17
    229c:	07 95       	ror	r16
    229e:	f7 94       	ror	r15
    22a0:	e7 94       	ror	r14
    22a2:	d7 94       	ror	r13
    22a4:	c7 94       	ror	r12
    22a6:	b7 94       	ror	r11
    22a8:	a7 94       	ror	r10
    22aa:	48 f4       	brcc	.+18     	; 0x22be <__muldi3+0x36>
    22ac:	10 68       	ori	r17, 0x80	; 128
    22ae:	a2 0f       	add	r26, r18
    22b0:	b3 1f       	adc	r27, r19
    22b2:	c4 1f       	adc	r28, r20
    22b4:	d5 1f       	adc	r29, r21
    22b6:	e6 1f       	adc	r30, r22
    22b8:	f7 1f       	adc	r31, r23
    22ba:	08 1e       	adc	r0, r24
    22bc:	19 1e       	adc	r1, r25
    22be:	22 0f       	add	r18, r18
    22c0:	33 1f       	adc	r19, r19
    22c2:	44 1f       	adc	r20, r20
    22c4:	55 1f       	adc	r21, r21
    22c6:	66 1f       	adc	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	88 1f       	adc	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	9a 94       	dec	r9
    22d0:	21 f7       	brne	.-56     	; 0x229a <__muldi3+0x12>
    22d2:	9d 01       	movw	r18, r26
    22d4:	ae 01       	movw	r20, r28
    22d6:	bf 01       	movw	r22, r30
    22d8:	c0 01       	movw	r24, r0
    22da:	11 24       	eor	r1, r1
    22dc:	9f 90       	pop	r9
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <_exit>:
exit():
    22e4:	f8 94       	cli

000022e6 <__stop_program>:
__stop_program():
    22e6:	ff cf       	rjmp	.-2      	; 0x22e6 <__stop_program>
